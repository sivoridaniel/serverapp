#line 2 "/home/agustin/git/serverapp/doxygen/generated_src/pre.cpp"

#line 4 "/home/agustin/git/serverapp/doxygen/generated_src/pre.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer preYY_create_buffer
#define yy_delete_buffer preYY_delete_buffer
#define yy_flex_debug preYY_flex_debug
#define yy_init_buffer preYY_init_buffer
#define yy_flush_buffer preYY_flush_buffer
#define yy_load_buffer_state preYY_load_buffer_state
#define yy_switch_to_buffer preYY_switch_to_buffer
#define yyin preYYin
#define yyleng preYYleng
#define yylex preYYlex
#define yylineno preYYlineno
#define yyout preYYout
#define yyrestart preYYrestart
#define yytext preYYtext
#define yywrap preYYwrap
#define yyalloc preYYalloc
#define yyrealloc preYYrealloc
#define yyfree preYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE preYYrestart(preYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t preYYleng;

extern FILE *preYYin, *preYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up preYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via preYYrestart()), so that the user can continue scanning by
	 * just pointing preYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when preYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t preYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow preYYwrap()'s to do buffer switches
 * instead of setting up a fresh preYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void preYYrestart (FILE *input_file  );
void preYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE preYY_create_buffer (FILE *file,int size  );
void preYY_delete_buffer (YY_BUFFER_STATE b  );
void preYY_flush_buffer (YY_BUFFER_STATE b  );
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void preYYpop_buffer_state (void );

static void preYYensure_buffer_stack (void );
static void preYY_load_buffer_state (void );
static void preYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER preYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE preYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE preYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE preYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *preYYalloc (yy_size_t  );
void *preYYrealloc (void *,yy_size_t  );
void preYYfree (void *  );

#define yy_new_buffer preYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define preYYwrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *preYYin = (FILE *) 0, *preYYout = (FILE *) 0;

typedef int yy_state_type;

extern int preYYlineno;

int preYYlineno = 1;

extern char *preYYtext;
#define yytext_ptr preYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up preYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	preYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 187
#define YY_END_OF_BUFFER 188
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1399] =
    {   0,
      169,  169,  188,  186,  187,    1,  186,  187,  185,  187,
        3,  186,  187,  186,  187,  186,  187,    2,  186,  187,
        6,  186,  187,    1,    6,  186,  187,    6,  186,  187,
        6,  185,  187,    3,    6,  186,  187,    5,  186,  187,
        6,  186,  187,    6,  186,  187,    6,  186,  187,    6,
      186,  187,    2,    6,  186,  187,   59,  186,  187,    1,
       59,  186,  187,   54,  185,  187,    3,   59,  186,  187,
       59,  186,  187,   59,  186,  187,   56,   59,  186,  187,
       56,   59,  186,  187,   56,   59,  186,  187,   56,   59,
      186,  187,   56,   59,  186,  187,   56,   59,  186,  187,

       56,   59,  186,  187,    2,   59,  186,  187,   83,  186,
      187,    1,   83,  186,  187,   81,  185,  187,    3,   83,
      186,  187,   83,  186,  187,   83,  186,  187,   82,   83,
      186,  187,   82,   83,  186,  187,   82,   83,  186,  187,
        2,   83,  186,  187,   84,   87,  186,  187,    1,   84,
       87,  186,  187,   92,  185,  187,    3,   84,   87,  186,
      187,   86,   87,  186,  187,   87,  186,  187,   87,  186,
      187,   84,   87,  186,  187,    2,   84,   87,  186,  187,
       93,   96,  186,  187,    1,   93,   96,  186,  187,    3,
       93,   96,  186,  187,   95,   96,  186,  187,   93,   96,

      186,  187,   93,   96,  186,  187,   96,  186,  187,    2,
       93,   96,  186,  187,   23,  186,  187,    1,   23,  186,
      187,   24,  185,  187,    3,   23,  186,  187,   16,   23,
      186,  187,   23,  186,  187,   23,  186,  187,   23,  186,
      187,   21,   23,  186,  187,16404,   23,  186,  187,   21,
       23,  186,  187,16404,   11,   23,  186,  187,   12,   23,
      186,  187,    2,   23,  186,  187,   17,  186,  187,    1,
       17,  186,  187,   19,  186,  187,   17,  186,  187,   17,
      186,  187,  186,  187,    2,   17,  186,  187,  186,  187,
        1,  186,  187,    3,  186,  187,  186,  187,  186,  187,

        2,  186,  187,   98,  186,  187,  102,  186,  187,    1,
      102,  186,  187,  100,  185,  187,    3,  102,  186,  187,
      102,  186,  187,  102,  186,  187,  102,  186,  187,    2,
      102,  186,  187, 8298,  186,  187,16487,16489,16490,  186,
      187,  109,  186,  187,  110,  186,  187,  108,  186,  187,
      186,  187,  112,  186,  187,  186,  187,  181,  186,  187,
        1,  181,  186,  187,  169,  181,  186,  187,  168,  185,
      187,    3,  181,  186,  187,  172,  181,  186,  187,  164,
      181,  186,  187,  173,  181,  186,  187,  181,  186,  187,
      181,  186,  187,  171,  181,  186,  187,  165,  181,  186,

      187,  181,  186,  187,    2,  181,  186,  187,   76,  186,
      187,    1,   76,  186,  187,   75,  185,  187,    3,   76,
      186,  187,   76,  186,  187,   76,  186,  187,    2,   76,
      186,  187,   74,   76,  186,  187,    1,   74,   76,  186,
      187,   74,   76,  186,  187,   74,   75,  185,  187,    3,
       74,   76,  186,  187,   73,   76,  186,  187,   74,   76,
      186,  187,   74,   76,  186,  187,    2,   74,   76,  186,
      187,  141,  143,  186,  187,    1,  143,  186,  187,  142,
      185,  187,    3,  141,  143,  186,  187,  143,  186,  187,
      143,  186,  187,  141,  143,  186,  187,  143,  186,  187,

      143,  186,  187,    2,  141,  143,  186,  187,  141,  143,
      186,  187,  143,  186,  187,  143,  186,  187,  143,  186,
      187,   33,   36,  186,  187,    1,   33,   36,  186,  187,
       35,  185,  187,    3,   33,   36,  186,  187,   36,  186,
      187,   33,   36,  186,  187,   33,   36,  186,  187,    2,
       33,   36,  186,  187,  144,  166,  186,  187,    1,  144,
      166,  186,  187,  146,  185,  187,    3,  144,  166,  186,
      187,  166,  186,  187,  144,  166,  186,  187,  144,  166,
      186,  187,  165,  166,  186,  187,    2,  144,  166,  186,
      187,  143,  186,  187,  143,  186,  187,  143,  186,  187,

      141,  143,  186,  187,  143,  186,  187,  143,  186,  187,
      143,  186,  187,  154,  158,  159,  186,  187,    1,  154,
      159,  186,  187,  155,  185,  187,    3,  154,  158,  159,
      186,  187,  158,  159,  186,  187,  154,  158,  159,  186,
      187,  159,  186,  187,    2,  154,  158,  159,  186,  187,
      151,  153,  186,  187,    1,  153,  186,  187,  152,  185,
      187,    3,  151,  153,  186,  187,  153,  186,  187,  151,
      153,  186,  187,  151,  153,  186,  187,    2,  151,  153,
      186,  187,  162,  163,  186,  187,    1,  163,  186,  187,
        3,  162,  163,  186,  187,  162,  163,  186,  187,  162,

      163,  186,  187,    2,  162,  163,  186,  187,   65,  186,
      187,    1,   65,  186,  187,   66,  185,  187,    3,   65,
      186,  187,   65,  186,  187,   65,  186,  187,   64,   65,
      186,  187,   65,  186,  187,   64,   65,  186,  187,    2,
       65,  186,  187,   72,  186,  187,    1,   72,  186,  187,
       70,  185,  187,    3,   72,  186,  187,   72,  186,  187,
       72,  186,  187,   68,   72,  186,  187,   72,  186,  187,
        2,   72,  186,  187,   71,   72,  186,  187,   69,   72,
      186,  187,  179,  186,  187,    1,  179,  186,  187,    3,
      179,  186,  187,  176,  179,  186,  187,  179,  186,  187,

      179,  186,  187,  179,  186,  187,    2,  179,  186,  187,
      180,  186,  187,    1,  180,  186,  187,    3,  180,  186,
      187,  178,  180,  186,  187,  180,  186,  187,  180,  186,
      187,  180,  186,  187,    2,  180,  186,  187,   60,  186,
      187,   58,  186,  187,    1,   58,  186,  187,    3,   58,
      186,  187,   58,  186,  187,   58,  186,  187,   58,  186,
      187,    2,   58,  186,  187,   32,  186,  187,    1,   32,
      186,  187,   30,  185,  187,    3,   32,  186,  187,   29,
       32,  186,  187,   32,  186,  187,   25,   32,  186,  187,
       26,   32,  186,  187,   32,  186,  187,   32,  186,  187,

       31,   32,  186,  187,    2,   32,  186,  187,   40,  186,
      187,    1,   40,  186,  187,    3,   40,  186,  187,   37,
       40,  186,  187,   40,  186,  187,   40,  186,  187,   40,
      186,  187,    2,   40,  186,  187,  127,  186,  187,    1,
      127,  186,  187,  126,  127,  186,  187,    3,  127,  186,
      187,  127,  186,  187,  127,  186,  187,    2,  127,  186,
      187,  130,  131,  186,  187,    1,  130,  131,  186,  187,
      129,  185,  187,    3,  130,  131,  186,  187,  130,  186,
      187,  130,  186,  187,  130,  131,  186,  187,  130,  186,
      187,    2,  130,  131,  186,  187,  183,  184,    6,    6,

        5,    6,    6,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   91,  183,   89,  184,   82,   82,   82,
       82,   84,   84,   93,   90,   93,  183,   88,   93,  184,
       93,   94, 8212,   21,16404,   22,   21,16404,   17,   17,
      183,   17,  184,   17,   18,   99,  183,  184,   97,   98,
      100,  183,  184,  101, 8298, 8297, 8295, 8298,16487,16489,
    16490,  110,  109,  110,  108,  112,  112,  107,  169,  170,
      113,  183,  114,  184,  165,  167,   74,   74,   73,  141,
      115,  117,  183,  116,  184,  141,  141,   33,   34,   33,
      184,   33,  144,  145,  144,  184,  144,  140,  140,  183,

      141,  154,  158,  154,  158,  156,  158,  183,  157,  158,
      184,  154,  158,  151,  148,  150,  183,  149,  151,  184,
      151,  162,  160,  162,  183,  161,  162,  184,  162,   64,
       61,   64,   68,   67,   69,  175,  183,  174,  184,  177,
       60,   57,   28,  183,   38,  183,   38,  184,   39,  126,
      131,  183,  184,  131,  183,  184,    4,   56,   56,   56,
       56,   56,   48,   56,   56,   56,   56,   56,   56,   91,
       91,  183,   89,   89,  184,   82,   82,   82,   77,   82,
       82,   85,    4,   84,   90,   93,   90,   90,   93,  183,
       88,   93,   88,   88,   93,  184,    4,   93,   15,   15,

       21,16404,   17,  183,   17,  184,    4,   17,  183,  184,
        4,    4,   99,  183,  184,    4,  111,  170,  113,  113,
      183,  114,  114,  184,  116,  184,    4,  141,  141,  120,
      119,   33,  184,    4,   33,  144,  184,    4,  144,  137,
      141,  139,  138,  158,  183,  158,  184,    4,  154,  158,
        4,  158,  147,  151,  184,    4,  151,  162,  183,  162,
      184,    4,  162,   64,  174,  184,   27,   28,  183,  133,
      133,  183,  132,  132,  184,    4,  131,  182,16391,16391,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   91,  182,   82,   78,   82,   82,   82,   85,   90,

       93,  182,   14,   13,   14,   21,16404,   17,  182,  182,
      182,  104,  112,  116,  118,  141,  120,  119,  141,  139,
      138,  158,  182,  162,  182,   64,   27,16391,    9, 8199,
       56,   56,   49,   52,   50,   50,   56,   56,   56,   56,
       56,   56,   56,   56,   79,   82,   80,   82,   82,   13,
       21,16404,  122,   64, 8199,    9,   56,   56,   53,   45,
       44,   56,   56,   56,   56,   51,   21,16404,  121,  125,
      128,  124,   64,    8,    9,   43,   47,   46,16425,   42,
       10,  123,   64,    9, 8233,   63,   62,    9, 8233,  136,
      135,    9,  134,    9,   55,    9,    9,    9

    } ;

static yyconst flex_int16_t yy_accept[1317] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    6,    9,   11,   14,   16,   18,
       21,   24,   28,   31,   34,   38,   41,   44,   47,   50,
       53,   57,   60,   64,   67,   71,   74,   77,   81,   85,

       89,   93,   97,  101,  105,  109,  112,  116,  119,  123,
      126,  129,  133,  137,  141,  145,  149,  154,  157,  162,
      166,  169,  172,  176,  181,  185,  190,  195,  199,  203,
      207,  210,  215,  218,  222,  225,  229,  233,  236,  239,
      242,  247,  250,  255,  259,  263,  267,  270,  274,  277,
      280,  283,  285,  289,  291,  294,  297,  299,  301,  304,
      307,  310,  314,  317,  321,  324,  327,  330,  334,  340,
      342,  345,  348,  351,  353,  356,  358,  361,  365,  369,
      372,  376,  380,  384,  388,  391,  394,  398,  402,  405,
      409,  412,  416,  419,  423,  426,  429,  433,  437,  442,

      446,  450,  455,  459,  463,  467,  472,  476,  480,  483,
      488,  491,  494,  498,  501,  504,  509,  513,  516,  519,
      522,  526,  531,  534,  539,  542,  546,  550,  555,  559,
      564,  567,  572,  575,  579,  583,  587,  592,  595,  598,
      601,  605,  608,  611,  614,  619,  624,  627,  633,  637,
      642,  645,  651,  655,  659,  662,  667,  670,  674,  678,
      683,  687,  691,  696,  700,  704,  709,  712,  716,  719,
      723,  726,  729,  733,  736,  740,  744,  747,  751,  754,
      758,  761,  764,  768,  771,  775,  779,  783,  786,  790,
      794,  798,  801,  804,  807,  811,  814,  818,  822,  826,

      829,  832,  835,  839,  842,  845,  849,  853,  856,  859,
      862,  866,  869,  873,  876,  880,  884,  887,  891,  895,
      898,  901,  905,  909,  912,  916,  920,  924,  927,  930,
      933,  937,  940,  944,  948,  952,  955,  958,  962,  966,
      971,  974,  979,  982,  985,  989,  992,  997,  998,  999,
      999, 1000, 1001, 1002, 1003, 1004, 1004, 1004, 1005, 1006,
     1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018,
     1019, 1020, 1021, 1022, 1023, 1023, 1023, 1024, 1025, 1028,
     1031, 1032, 1033, 1033, 1033, 1033, 1034, 1036, 1037, 1037,
     1039, 1040, 1042, 1044, 1045, 1046, 1046, 1047, 1048, 1049,

     1049, 1049, 1050, 1051, 1051, 1052, 1053, 1054, 1054, 1055,
     1055, 1056, 1057, 1058, 1062, 1062, 1062, 1063, 1064, 1065,
     1066, 1066, 1067, 1067, 1068, 1069, 1070, 1070, 1071, 1073,
     1075, 1076, 1077, 1077, 1078, 1079, 1080, 1081, 1082, 1084,
     1086, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
     1087, 1087, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1089,
     1090, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1101, 1101,
     1101, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1104, 1105,
     1106, 1109, 1112, 1114, 1114, 1114, 1115, 1116, 1118, 1121,
     1122, 1123, 1126, 1129, 1130, 1131, 1132, 1132, 1133, 1134,

     1135, 1136, 1138, 1140, 1141, 1142, 1143, 1143, 1143, 1143,
     1145, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1155,
     1155, 1156, 1157, 1158, 1158, 1158, 1158, 1158, 1159, 1160,
     1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
     1171, 1173, 1174, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
     1182, 1183, 1183, 1183, 1185, 1187, 1188, 1191, 1193, 1194,
     1197, 1199, 1200, 1200, 1201, 1201, 1201, 1203, 1205, 1207,
     1209, 1210, 1211, 1212, 1214, 1215, 1216, 1217, 1217, 1217,
     1218, 1218, 1219, 1220, 1222, 1223, 1225, 1227, 1229, 1229,
     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,

     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1230, 1230,
     1231, 1232, 1234, 1236, 1238, 1240, 1240, 1241, 1242, 1242,
     1243, 1244, 1246, 1248, 1251, 1253, 1253, 1253, 1253, 1254,
     1256, 1258, 1260, 1262, 1264, 1265, 1267, 1267, 1268, 1268,
     1268, 1270, 1271, 1273, 1274, 1276, 1278, 1278, 1279, 1279,
     1279, 1280, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
     1288, 1289, 1290, 1291, 1292, 1294, 1295, 1297, 1298, 1299,
     1299, 1300, 1300, 1303, 1304, 1306, 1306, 1306, 1308, 1310,
     1311, 1312, 1313, 1314, 1315, 1315, 1315, 1315, 1316, 1316,
     1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,

     1316, 1316, 1316, 1316, 1316, 1316, 1317, 1317, 1318, 1319,
     1319, 1320, 1320, 1321, 1322, 1324, 1324, 1324, 1326, 1327,
     1327, 1328, 1328, 1328, 1328, 1329, 1329, 1330, 1330, 1331,
     1332, 1333, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,
     1343, 1344, 1345, 1346, 1346, 1347, 1349, 1350, 1350, 1350,
     1351, 1351, 1351, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1356, 1356, 1357, 1357, 1358, 1359, 1359,

     1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1367,
     1367, 1369, 1369, 1369, 1369, 1370, 1370, 1370, 1370, 1370,
     1370, 1370, 1370, 1370, 1371, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1373, 1374, 1374, 1374, 1374, 1374, 1375,
     1375, 1376, 1376, 1377, 1377, 1378, 1379, 1380, 1381, 1381,
     1381, 1381, 1381, 1381, 1382, 1382, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1384, 1384, 1384, 1384, 1384, 1385, 1385,

     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1387, 1388, 1388,
     1388, 1388, 1388, 1389, 1389, 1390, 1390, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1392, 1392, 1392, 1392, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1395,
     1395, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1397, 1397, 1397, 1397, 1397, 1397,

     1397, 1397, 1397, 1397, 1397, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,

     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,

     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,

     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   14,    1,   15,   16,   17,   18,   19,   20,   19,
       19,   19,   19,   19,   19,   21,   21,   22,    1,   23,
       24,   25,   26,   27,   28,   28,   29,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       30,   31,   32,    1,   28,   33,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   43,   50,   51,   52,   53,   54,   43,   55,
       56,   43,   57,   10,   58,   59,    1,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43
    } ;

static yyconst flex_int32_t yy_meta[61] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    1,    1,    8,
        9,   10,   11,   12,    1,   11,   13,   14,   15,   15,
       15,    1,   16,   17,   17,    1,   18,   19,   19,    1,
       20,    1,   21,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,    1,    1,   21,    1
    } ;

static yyconst flex_int16_t yy_base[1438] =
    {   0,
        0,    4,    9,   69,  129,    0,  189,    0,  248,  258,
      268,  275,  335,    0,  394,  398,  426,  430,  490,    0,
      549,  553,  586,    0,  642,    0,  702,    0,  559,  761,
      766,  770,  776,  781,  840,  899,  796,  801,  959,    0,
        7,  806,  858,  888, 1018, 1023, 1029, 1038, 1098,    0,
     1158,    0, 1206,    0, 1261, 1265, 1271, 1296, 1329,    0,
     1328, 1385, 1444, 1503, 1392, 1432, 1563,    0,    0,    0,
     1622, 1681, 3585, 6333, 6333, 6333, 6333,    1, 3552, 6333,
     6333, 6333, 1741, 6333, 6333, 6333,    2, 3543,   22,    0,
     6333, 6333, 6333, 6333, 6333,   10, 3542,    0, 3513, 3520,

        0,    7, 3504, 3500, 6333, 6333, 6333, 6333, 6333,   15,
     3515,    0,   10, 3501, 6333,    0,    0, 6333,    0, 6333,
     3505,   18, 3498,    0,    0,    0,    0, 6333,   30, 3497,
        0,    0, 6333, 6333, 6333, 6333, 6333, 3490,   38, 3484,
      284,   54,  405, 6333, 6333, 6333,    0,    0, 6333,   47,
     3474,    0,    0,   24,  260,  284,  296,  290,  288,    0,
     3495, 3490, 6333, 3488,  250,   13,   58, 3478,  410,  248,
     3478, 3469, 3468, 3447,   20, 3451, 6333, 6333,  275, 6333,
     6333, 6333, 3446, 6333,  284, 3424, 6333,    0,   63, 6333,
     6333, 6333, 6333, 6333,  286, 3413, 6333, 6333, 6333,  304,

     6333, 6333, 6333,  305, 3411, 6333,    0, 6333, 6333,    0,
     3418,  306, 3406, 1775, 6333,    0,  412,  424, 3389, 3358,
        0,    0, 6333,    0, 3394,  308, 3380,    0,    0,    0,
     6333,    0, 3378,  311, 3369,    0,    0, 3371,  313,  218,
      559,  779, 3347, 3310,  315,    0, 6333,  405,  316,  441,
      434,  444,    0, 6333, 6333,    0, 3349,  422, 3331,    0,
        0, 6333,    0,  435, 3327,    0, 6333, 6333, 6333, 6333,
      450, 3325,    0,  414, 3312, 6333, 6333, 6333, 6333, 6333,
      455, 3321,    0, 3342, 6333, 6333,    0, 6333, 6333, 6333,
     6333,  460, 3309,    0, 6333, 6333, 6333, 6333, 6333,  461,

     3308,    0, 6333,    0, 6333, 6333, 6333,  462, 3306,  477,
     6333, 6333, 6333, 6333, 6333, 6333, 3299, 6333, 6333,  470,
     3303, 6333, 6333, 6333, 6333, 6333, 6333,  471, 3297,    0,
     6333, 6333, 6333,    0, 6333,  538, 3295, 6333,    0,    0,
     6333,    0, 6333,  551, 3275,  543,    0, 3278, 3273,    0,
     6333, 1830, 6333,  567,    0,  579,  278,    0, 3251, 3236,
      355, 3237,  822, 3216, 3228, 3226, 3215, 3233, 3228,    0,
      517, 3207,  840,    0, 3219,  570,  922,    0,  804,  432,
     1047, 6333, 3218,  582,  600, 6333,  845, 6333, 3221,  904,
        0, 3202, 3189, 1063, 6333,  553, 6333,  569,  822, 1885,

      594, 6333,  764, 3201, 6333,  407,  773, 1907, 6333, 3192,
      871, 6333, 6333,  893, 3191,  474, 3188, 3180, 3178, 3169,
     3153,  787, 3145,  814, 6333,  608, 3152, 3156,  802,  862,
        0, 6333, 3151, 6333,  875, 6333,    0, 6333,  837, 3120,
     1214, 1897, 3088, 3080, 3080, 3073, 3090, 3086, 3050, 3059,
     3050, 1021, 1285, 3058, 3031,  820, 3053, 3020,    0, 6333,
     3042, 1337,    0, 6333, 3041, 1389, 6333, 3041, 3001,  863,
     1395, 1405, 3009, 2982,  861, 3006, 2978,  771,    0,    0,
     3018, 3013, 1951,  850, 2981,    0,  919, 3014, 3003, 1461,
        0, 2998, 2993, 1477,    0, 6333, 3002, 2962,    0, 6333,

        0, 2986, 2980, 6333,    0, 6333, 2980, 2972,  862, 2967,
     2953, 2948, 6333,    0,    0,  917,  892, 1520, 2926, 2903,
     2931, 6333, 6333,  938,  899,  939, 2932, 2889, 2890, 2891,
     2878, 2873, 6333, 2875, 2866, 2853, 2846, 2850, 2843,    0,
     2862,    0,    0, 2834, 2826, 2821, 6333, 2818, 2811, 2835,
     6333, 2834,  933,    0, 1014,    0, 1059, 1019,    0, 1031,
        0, 6333, 2830, 2823, 1073, 1219, 1281, 2813,    0,    0,
     1287,  788,  929, 6333,  925, 2817, 2816, 1091,  280, 6333,
     2797, 2800, 6333, 2780, 6333, 6333, 2774,    0, 2734, 2730,
     2729, 1281, 2723, 2738, 2737, 2707, 2720, 2710,  902,  994,

     2713, 2697, 2687, 2689, 2687, 2667, 2665, 1428, 1275, 2668,
     2641,    0,    0,    0,    0, 2654, 6333, 1466, 1277, 2657,
     2627, 2660,    0, 1049,    0, 2629, 2625, 1049, 6333,    0,
        0, 2653,    0,    0, 2625, 6333, 2644, 6333, 2643, 1284,
     2629, 6333, 2615, 6333, 6333,    0, 2594, 6333, 1216, 2610,
     1421, 2609, 1634, 2582, 2571, 1079, 1976, 2571, 2570, 2569,
     2546, 2541, 2540, 2546,    0, 1303, 1026, 2544, 2542, 2564,
     6333, 1309, 1066, 6333, 6333, 1410, 1508, 1629,    0,  930,
     2570, 6333, 6333, 2554, 1227, 1287, 2529, 6333, 2519, 2510,
     2514, 2508, 2490, 2490, 2496, 2492, 2492, 1337, 2490, 2478,

     2484, 2472, 2467, 2479, 2457, 1310, 1293, 2470, 2443, 1505,
     1390, 1358, 2467, 2440,    0, 2450, 2456,    0, 2440, 2473,
     6333, 1421, 2442, 2451, 1639, 1654, 1659, 1662, 6333, 2424,
     2418, 6333, 6333, 1274, 2416, 2036, 1036, 2414, 2399, 2413,
     2409, 2439, 6333, 1344, 2400,    0, 1441, 2426, 2425, 6333,
     2423, 1544, 1642, 2391, 2388, 2383, 1493, 2379, 2369, 2369,
     2357, 2356, 2366, 2348, 1665, 1514, 2347, 1519, 2345, 2344,
     2335, 2336, 2334, 2346, 2331, 2329, 2327, 2317, 2334, 2331,
     2309, 2320, 2311, 1549, 2317, 2343, 2335, 2297, 1402, 1902,
     2094, 1456, 1462, 1668, 2097, 2100, 2304, 2337, 1632, 2295,

     6333, 1479, 6333, 1491, 1690, 2293, 2317, 2316, 2274, 1697,
     2105, 2110, 2309, 2252, 1626, 2251, 2248, 2240, 2246, 2245,
     2253, 2231, 2218, 1700, 6333, 1723, 2226, 2225, 2224, 2216,
     2209, 2206, 2196, 2201, 2200, 1299, 2184, 2175, 2179, 2185,
     2172, 2170, 1726, 2175, 2164, 2120, 2123, 1524, 6333, 2126,
     2134, 2156, 2206, 1711, 1648, 6333, 1717, 6333,  569, 1802,
     1814, 2161, 2165, 6333, 2134, 2187, 2141, 2135, 2134, 2124,
     2118, 2113, 2103, 2108, 2094, 1729, 2106, 2112, 2102, 2099,
     2087, 2085, 2093, 2078, 2094, 2086, 2075, 2080, 2063, 2058,
     1938, 1923, 1703, 1918, 2166, 2171, 2182, 2192, 2195,    0,

     1897, 1890, 2198, 1930, 1871, 1732, 1884, 1890, 1869, 1852,
     1772, 1766, 1768, 1753, 1756,    0, 1683, 1693, 1675, 1670,
     1662, 1625, 1631, 1630, 1641, 1608, 1812, 6333,    0, 2203,
     2216, 2228, 2231, 2237,    0, 1614, 1936, 2258, 2240, 1577,
        0, 1484, 1492, 1488, 1462, 6333, 1450, 1433, 1429, 1420,
     1420, 1390, 1381, 1382, 6333, 2253, 2264, 2276, 2279, 2286,
     1384, 2299, 2302, 2313, 1373, 6333, 1336, 1300, 1293, 1272,
     1234, 1215, 1180, 1191, 1165, 2319, 2322, 2325, 2334, 2345,
     6333, 2348, 2359, 2369, 1016,  901,  822,  776,  565,  520,
     2381, 2384, 2395, 2405, 2408, 2416, 2428, 2419,  410,  400,

      348, 2441, 2444, 2455, 2464, 2467, 2470, 2476, 2487,  287,
     2491, 2503, 2506, 2514, 2527, 2534, 2538, 2548,  249, 2551,
     2554, 2565, 2575, 2585, 2588, 2594, 2599, 2609, 2612, 2622,
     2625, 2631, 2636, 2641, 2645, 2655, 2658, 2661, 2671, 2677,
     2680, 2691, 2694, 2704, 2700, 2710, 2720, 2716, 2726, 2737,
     2730, 2742, 2748, 2759, 2762, 2776, 2765, 2781, 2792, 2786,
     2797, 2803, 2808, 2814, 2820, 2825, 2832, 2835, 2847, 2850,
     2854, 2864, 2867, 2871, 2881, 2884, 2890, 2895, 2902, 2905,
     2915, 2919, 2922, 2932, 2936, 2939, 2950, 2953, 2956, 2966,
     2970, 2973, 2983, 2987, 2990, 3000, 3005, 3015, 3011, 3021,

     3031, 3041, 3046, 3049, 3059, 3062, 3066, 3072, 3077, 3080,
     3090, 3096, 3100, 3106, 3110, 3114, 3127, 3130, 3136, 3141,
     3146, 3149, 3161, 3164, 3170, 3175, 3182, 3185, 3196, 3199,
     3205, 3210, 3216, 3219, 3230, 3233, 3236, 3246, 3251, 3254,
     3265, 3268, 3274, 3279, 3285, 3295, 3291, 3301, 3305, 3311,
     3315, 3321, 3334, 3337, 3351, 3340, 3361, 3367, 3356, 3372,
     3378, 3383, 3389, 3395, 3400, 3406, 3416, 3411, 3422, 3426,
     3438, 3441, 3444, 3455, 3458, 3462, 3472, 3475, 3481, 3486,
     3493, 3499, 3504, 3510, 3513, 3523, 3527, 3530, 3541, 3545,
     3548, 3559, 3562, 3572, 3568, 3578, 3588, 3598, 3603, 3606,

     3616, 3619, 3623, 3629, 3634, 3637, 3647, 3653, 3657, 3663,
     3667, 3671, 3684, 3687, 3693, 3698, 3703, 3706, 3718,  259,
     3722, 3727, 3732, 3742, 3749, 3754, 3761, 3766, 3773, 3778,
     3783, 3788, 3793, 3797, 3800, 3804, 3809,  201, 3812, 3816,
     3821, 3824, 3828, 3833, 3838, 3843, 3848, 3855, 3859, 3867,
     3871, 3879, 3883, 3888, 3893, 3898, 3903, 3906, 3910, 3914,
     3917, 3922, 3926, 3929, 3934, 3938, 3943, 3948, 3953, 3961,
     3965, 3972, 3977, 3984, 3989, 3993, 3998, 4003, 4008, 4011,
     4016, 4020, 4023, 4027, 4032, 4035, 4039, 4044, 4048, 4053,
     4058, 4066, 4071, 4078, 4082, 4090, 4094, 4099, 4103, 4108,

     4113, 4116, 4121, 4126, 4129, 4133, 4137, 4140, 4145, 4149,
     4154, 4158, 4163, 4171, 6333, 4228, 4249, 4270, 4291, 4312,
     4333, 4354, 4375, 4396, 4417, 4438, 4459, 4480, 4501, 4522,
     4543, 4564, 4585, 4606, 1520, 1542, 1543, 4627, 4648, 4669,
     4690, 4711, 4730, 4749, 4770, 4791, 4810, 4829, 4848, 4866,
     1673, 4885, 4906, 4925, 4946, 4967, 4988, 5009, 5030, 5051,
     1679, 1788, 1808, 5072, 1885, 5093, 5114, 5133, 5152, 5168,
     1897, 1902, 5185, 5206, 1907, 5227, 5248, 5269, 5290, 5311,
     5332, 5353, 5372, 5391, 5412, 5431, 5450, 5469, 5487, 1930,
     5506, 5527, 5546, 5567, 5588, 5609, 5630, 5651, 5672, 1931,

     1939, 1941, 1946, 5693, 5714, 5733, 5752, 5773, 5794, 1951,
     5815, 5836, 1953, 5857, 5878, 5899, 5920, 5941, 5962, 5983,
     6002, 6021, 6042, 6063, 6084, 6105, 6126, 6147, 6168, 6189,
     6210, 6229, 6248, 2125, 6269, 6290, 6311
    } ;

static yyconst flex_int16_t yy_def[1438] =
    {   0,
     1316, 1316, 1316, 1315, 1315,    5, 1315,    7, 1317, 1317,
     1318, 1318, 1315,   13, 1319, 1319, 1320, 1320, 1315,   19,
     1321, 1321,   19,   23, 1315,   25, 1315,   27, 1322, 1323,
     1316, 1316, 1316, 1316, 1324, 1324, 1325, 1325, 1315,   39,
       36,   36, 1326, 1326, 1327, 1327, 1328, 1328, 1315,   49,
     1315,   51,   51,   53, 1329, 1329, 1330, 1330,   23,   59,
     1331, 1331, 1332, 1332, 1333, 1333, 1315,   67,   67,   67,
     1334, 1334, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1335, 1335,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1336, 1336, 1336,

     1336, 1336, 1336, 1336, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1337, 1337, 1337, 1315, 1338, 1338, 1315, 1338, 1315,
     1339, 1315, 1338, 1338, 1340, 1340, 1340, 1315, 1340, 1340,
     1341, 1340, 1315, 1315, 1315, 1315, 1315, 1342, 1315, 1315,
     1343, 1315, 1343, 1315, 1315, 1315, 1344, 1344, 1315, 1344,
     1344, 1345, 1344, 1346, 1346, 1346, 1346, 1346, 1346, 1347,
     1348, 1348, 1315, 1348, 1348, 1348, 1315, 1348, 1349, 1315,
     1315, 1315, 1315, 1315, 1350, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1351, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1352,

     1315, 1315, 1315, 1315, 1315, 1315, 1353, 1315, 1315, 1353,
     1315, 1315, 1353, 1315, 1315, 1353, 1353, 1315, 1315, 1315,
     1354, 1354, 1315, 1354, 1315, 1354, 1354, 1354, 1355, 1355,
     1315, 1355, 1315, 1355, 1355, 1351, 1355, 1315, 1315, 1315,
     1353, 1315, 1315, 1315, 1356, 1357, 1315, 1356, 1358, 1356,
     1315, 1356, 1359, 1315, 1315, 1359, 1315, 1359, 1359, 1359,
     1360, 1315, 1360, 1360, 1360, 1360, 1315, 1315, 1315, 1315,
     1315, 1315, 1361, 1315, 1361, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1362, 1315, 1315, 1315, 1363, 1315, 1315, 1315,
     1315, 1315, 1315, 1364, 1315, 1315, 1315, 1315, 1315, 1315,

     1315, 1364, 1315, 1365, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1366, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1367,
     1315, 1315, 1315, 1368, 1315, 1315, 1315, 1315, 1369, 1369,
     1315, 1369, 1315, 1315, 1369, 1315, 1369, 1315, 1315, 1370,
     1315, 1315, 1315, 1371, 1371, 1371, 1371, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1373, 1374, 1375,
     1375, 1375, 1375, 1376, 1377, 1378, 1376, 1379, 1380, 1381,
     1379, 1315, 1315, 1382, 1315, 1315, 1383, 1315, 1315, 1383,
     1384, 1384, 1384, 1384, 1315, 1385, 1315, 1385, 1385, 1385,

     1315, 1315, 1386, 1387, 1315, 1387, 1387, 1387, 1315, 1315,
     1315, 1315, 1315, 1388, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1389, 1315, 1315, 1315, 1315, 1315, 1315,
     1390, 1315, 1315, 1315, 1391, 1315, 1392, 1315, 1315, 1315,
     1392, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1392, 1315, 1315, 1315, 1315, 1315, 1315, 1393, 1315,
     1393, 1393, 1394, 1315, 1394, 1394, 1315, 1315, 1315, 1315,
     1392, 1315, 1315, 1315, 1315, 1315, 1315, 1395, 1396, 1397,
     1397, 1397, 1395, 1315, 1315, 1398, 1315, 1315, 1398, 1398,
     1399, 1399, 1399, 1399, 1400, 1315, 1315, 1400, 1401, 1315,

     1402, 1315, 1315, 1315, 1403, 1315, 1315, 1404, 1405, 1315,
     1315, 1315, 1315, 1406, 1407, 1315, 1315, 1407, 1315, 1315,
     1315, 1315, 1315, 1315, 1408, 1315, 1409, 1410, 1410, 1410,
     1410, 1410, 1315, 1410, 1410, 1410, 1410, 1410, 1410, 1411,
     1411, 1412, 1412, 1413, 1413, 1413, 1315, 1413, 1413, 1414,
     1315, 1315, 1315, 1415, 1416, 1417, 1416, 1418, 1419, 1418,
     1420, 1315, 1315, 1315, 1315, 1315, 1421, 1422, 1422, 1422,
     1423, 1423, 1423, 1315, 1424, 1424, 1424, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1392, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,

     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1392, 1315, 1315,
     1315, 1425, 1425, 1394, 1394, 1315, 1315, 1392, 1315, 1315,
     1315, 1397, 1397, 1395, 1397, 1315, 1315, 1315, 1315, 1398,
     1398, 1399, 1399, 1399, 1400, 1315, 1426, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1407, 1315, 1315, 1408, 1427,
     1315, 1409, 1315, 1410, 1410, 1410, 1315, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1411, 1413, 1413, 1413, 1413, 1428,
     1315, 1315, 1416, 1315, 1315, 1315, 1315, 1421, 1422, 1423,
     1424, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,

     1315, 1315, 1315, 1315, 1315, 1392, 1315, 1315, 1315, 1315,
     1392, 1315, 1315, 1315, 1397, 1315, 1315, 1399, 1400, 1429,
     1315, 1315, 1315, 1427, 1430, 1315, 1315, 1315, 1315, 1410,
     1410, 1315, 1315, 1315, 1410, 1315, 1410, 1410, 1410, 1410,
     1410, 1410, 1315, 1315, 1413, 1413, 1413, 1315, 1315, 1315,
     1315, 1315, 1421, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1400, 1315, 1315, 1315, 1430, 1430,
     1430, 1315, 1430, 1315, 1315, 1315, 1410, 1410, 1315, 1315,

     1315, 1315, 1315, 1410, 1410, 1410, 1410, 1315, 1315, 1315,
     1421, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1431, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1400, 1315, 1430, 1430, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1432, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1433, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1431, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1400, 1315, 1430, 1430, 1315, 1315, 1315, 1434,

     1315, 1315, 1315, 1315, 1433, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1435, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1436, 1430,
     1430, 1315, 1315, 1315, 1434, 1315, 1315, 1315, 1315, 1315,
     1437, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1430, 1430, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1430, 1430, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1430, 1430, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,

     1315, 1430, 1430, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1430, 1430, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1430,
     1430, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,

     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,

     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,

     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315,    0, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,

     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315
    } ;

static yyconst flex_int16_t yy_nxt[6394] =
    {   0,
     1315,   75,  401,   76,   77,   75, 1315,   76,   77,  207,
       75,  402,   76,   77,  348,  348,  405,   78,  349,  349,
      238,   78,  422,  348,  239,   79,   78,  349,  368,   79,
      397,  368,  369,  240,   79,  369,  423,  240,  408,  215,
      356,  356,  356,  379,  361,  363,  362,  380,  397,  356,
      356,  348,  364,  365,  371,  349,  372,  388,  389,   80,
      392,  409,  410,   80,  393,  215,  432,  433,   80,   81,
       82,   83,   84,   85,   81,   81,   86,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   87,   81,   81,   81,
       81,   81,   81,   81,   88,   81,   89,   89,   81,   81,

       81,   81,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   81,   81,   81,   91,   92,
       93,   92,   94,   95,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   96,   92,   92,   92,
       92,   92,   92,   92,   97,   92,   98,   98,   92,   92,
       92,   92,   98,   98,   99,  100,  101,   98,   98,   98,
      102,   98,   98,   98,   98,   98,   98,  103,   98,   98,
       98,  104,   98,   98,   98,   92,   92,   92,  105,  106,
      107,  106,  108,  109,  106,  106,  106,  106,  106,  106,

      106,  106,  106,  106,  106,  106,  110,  106,  106,  106,
      106,  106,  106,  106,  111,  106,  112,  112,  106,  106,
      106,  106,  112,  112,  112,  112,  113,  112,  112,  112,
      114,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  106,  106,  106,  115,  117,
      416,  118,  119,  405,  120,  469,  470,  864,  121,  117,
      417,  118,  119,  406,  120,  122,  397,  407,  121,  126,
      386,   76,  127,  123,  128,  122,  126,  426,   76,  127,
      526,  128,  427,  123,  397,  129,  385,  385,  385,  527,
      397,  413,  129,  130,  397,  386,  397,  429,  131,  368,

      130,  430,  397,  369,  617,  131,  435,  124,  397,  398,
      415,  436,  397,  399,  397,  400,  479,  124,  368,  439,
      397,  348,  369,  440,  348,  461,  468,  132,  465,  481,
      349, 1019,  480,  482,  132,  133,  134,  133,  135,  136,
      133,  137,  133,  133,  133,  138,  133,  133,  133,  133,
      133,  133,  139,  133,  133,  133,  133,  133,  133,  133,
      140,  133,  141,  141,  133,  142,  133,  133,  141,  141,
      141,  141,  143,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  144,  145,  133,  146,  148,  530,   76,   77,  148,

      149,   76,   77,  617,  149,  531,  479,  385,  385,  385,
      405,  150,  411,  412,  452,  150,  386,  496,  497,  151,
      575,  413,  480,  151,  152,  453,  456,  155,  152,   76,
      156,  155,   74,   76,  156,  488,   74,  453,  559,  489,
      415,  438,  479,  157,  454,  479, 1010,  157,  492,  560,
       74,  158,  493,  153,   74,  158,  454,  153,  480,  390,
      484,  480,  559,  348,  484,  757,  483,  349,  348,  485,
      455,  445,  349,  502,  348,  348,  416,  503,  349,  349,
      506,  507,  455,  510,  511,  159,  417,  349,  512,  159,
       74,   75,   74,   76,   77,   74,   74,   74,   74,   74,

       74,   74,   74,   74,   74,   74,   74,   78,   74,   74,
       74,   74,   74,   74,   74,   79,   74,  160,  160,   74,
       74,   74,   74,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,   74,   74,   74,   80,
      162,  348,  163,  164,  162,  349,  163,  164,  544,  397,
      192,  471,  193,  194,  516,  617,  165,  545,  517,  519,
      165,  859,  472,  519,  166,  397,  195,  397,  166,  167,
      520,  524,  571,  167,  196,  356,  356,  356,  553,  553,
      525,  473,  564,  397,  356,  356,  401,  356,  356,  356,

      565,  565,  566,  566,  566,  402,  356,  356,  168, 1001,
      426,  386,  168,  169,  169,  427,  901,  474,  197,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,   74,   75,  170,   76,   77,   74,   74,   74,
       74,   74,   74,  171,  172,   74,  173,   74,  174,   78,
       74,   74,   74,   74,   74,   74,   74,   79,   74,  175,
      175,   74,  176,   74,   74,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,   74,   74,

       74,   80,  177,  178,  179,  180,  181,  177,  182,  183,
      177,  177,  184,  177,  177,  177,  177,  177,  177,  185,
      177,  177,  177,  177,  177,  177,  177,  186,  187,  188,
      188,  177,  189,  177,  177,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  177,  177,
      177,  190,  199,  200,  201,  202,  401,   75,  203,   76,
       77,   75,  479,   76,   77,  402,  405,   75,  204,   76,
       77,  475,   75,   78,   76,   77,  205,   78,  480,  422,
      576,   79,  472,   78,  397,   79,  467,  222,   78,  223,

      224,   79,  222,  423,  223,  224,   79,  583,  241,  225,
      556,  473,  397,  226,  225,  584,  422,  557,  226,  242,
      206,  227,  609,  239,  533,   80,  227,  533,  397,   80,
      423,  617,  240,  533,  556,   80,  240,  474,  243,  572,
       80,  208,  547,  209,  210,  547,  397,  385,  385,  385,
      521,  547,  454,  211,  438,  228,  386,  212,  534,  246,
      228,  247,  248,  619,  244,  213,  214,  585,  535, 1000,
      214,  617,  215,  411,  412,  249,  548,  435,  455,  586,
      640,  640,  436,  250,  251,  626,  549,  591,  251,  246,
      578,  247,  248,  473,  617,  411,  412,  644,  215,  216,

      208,  217,  209,  210,  413,  249,  385,  385,  385,  645,
      650,  651,  218,  250,  251,  386,  212,  252,  251,  474,
      617,  628,  642,  415,  213,  214,  629,  554,  405,  214,
      643,  219,  523,  554,  554,  397,  397,  554,  695,  523,
      524,  526,  681,  671,  554,  554,  554,  252,  696,  525,
      527,  672,  672,  397,  397,  567,  698,  220,  216,  229,
      230,  229,  231,  232,  229,  229,  229,  229,  229,  229,
      229,  229,  233,  229,  229,  229,  234,  229,  229,  229,
      229,  229,  229,  229,  235,  229,  236,  236,  229,  229,
      229,  229,  236,  236,  236,  236,  236,  236,  236,  236,

      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  229,  229,  229,  237,  254,
      556,  255,  256,  608,  254,  559,  255,  256,  744,  697,
      262,  257,  247,  263,  453,  258,  257,  559,  802,  262,
      258,  247,  263,  259,  556,  698,  264,  803,  259,  559,
      479,  628,  561,  454,  265,  264,  629,  561,  561,  561,
      999,  559,  561,  265,  561,  556,  480,  745,  570,  561,
      561,  561,  556,  570,  570,  570,  673,  260,  570,  455,
      570,  732,  260,  675,  732,  570,  570,  570,  266,  556,
      732,  676,  676,  682,  682,  682,  556,  266,  267,  268,

      267,  269,  270,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  271,  267,  267,  267,  267,
      267,  267,  267,  272,  267,  273,  273,  267,  274,  267,
      267,  273,  273,  273,  275,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  267,  267,  267,  276,  277,  278,
      277,  279,  280,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  281,  277,  277,  277,  277,
      277,  277,  277,  282,  277,  283,  283,  277,  284,  277,
      277,  283,  283,  283,  283,  283,  283,  283,  283,  283,

      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  277,  277,  277,  285,  286,  588,
      617,  677,  677,  677,  588,  588,  588,  650,  651,  588,
      386,  523,  990,  287,  287,  617,  588,  588,  588,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  289,  754,   76,  290,  289,  291,   76,  290,
      617,  291,  297,  755,   76,  298,  799,  707,  292,  712,
      989,  299,  292,  385,  385,  385,  293,  456,  300,  688,
      293,  294,  386,  397,  721,  294,  301,  297,  453,   76,

      298,  302,  722,  722,  680,  743,  299,  454,  743,  473,
      688,  397,  706,  300,  743,  800,  988,  454,  678,  551,
      295,  301,  756,  453,  295,  454,  302,  749,  749,  306,
      303,   94,  307,  455,  886,  474,  987,  688,  757,  768,
      768,  768,  613,  455,  986,  308,  744,  613,  613,  613,
      617,  455,  613,  309,  613,  303,  304,  304,  310,  613,
      613,  613,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  809,  306,  311,   94,  307,
      473,  757,  711,  325,  615,   76,  326,  618,  327,  615,

      615,  615,  308,  472,  615, 1315,  615,  475,  472,  328,
      309,  615,  615,  615,  792,  310,  474,  329,  472,  985,
      750,  981,  330,  726,  727,  728,  975,  473,  751,  751,
      706,  638,  974,  325,  973,   76,  326,  473,  327,  787,
      787,  453,  729,  547,  311,  313,  547,  314,  315,  328,
      316,  331,  547,  474,  317,  318,  319,  329,  848,  849,
      454,  320,  330,  474,  972, 1315,  631,  971,  711,  321,
      322,  631,  631,  631,  792,  970,  631,  729,  631,  472,
      969,  802,  634,  631,  631,  631,  455,  634,  634,  634,
      803,  331,  634,  855,  634,  815,  815,  815,  473,  634,

      634,  634,  856,  323,  313,  698,  314,  315,  968,  316,
      752,  752,  752,  317,  318,  319,  824,  825,  826,  386,
      320,  768,  768,  768,  474,  523,  848,  849,  321,  322,
      646,  646,  646,  757,  357,  646,  967,  523,  357,  757,
      776,  777,  646,  646,  646,  778,  810,  810,  810,  779,
      780,  843,  825,  826,  781,  386,  358,  370,  782,  783,
      358,  370,  323,  332,  333,  334,   76,  335,  334,  332,
      332,  332,  334,  332,  334,  334,  332,  332,  334,  334,
      336,  334,  334,  334,  332,  332,  332,  332,  337,  332,
      334,  334,  332,  332,  332,  332,  334,  334,  334,  334,

      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  332,
      332,  332,  338,  340,  965,  341,  342,  343,  815,  815,
      815,  385,  385,  385,  799,  343,  728,  728,  728,  344,
      386,  790,  727,  791,  385,  385,  385,  345,  346,  961,
      855,  792,  346,  386,  954,  729,  794,  795,  796,  856,
      793,  796,  796,  796,  796,  796,  796,  768,  768,  768,
      850,  851,  852,  800,  953,  729,  952,  951,  753,  950,
      729,  347,  340,  729,  341,  342,  343,  431,  811,  729,
      729,  431,  857,  495,  343,  793,  858,  495,  344,  861,

      861,  861,  824,  825,  826,  927,  345,  346,  386,  949,
      729,  346,  858,  732,  928,  729,  732,  948,  729,  857,
      698,  823,  732,  858,  729,  826,  825,  826,  843,  825,
      826,  768,  768,  768,  815,  815,  815,  947,  698,  858,
      347,  351,  351,  352,  351,  351,  351,  351,  353,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  354,  354,
      351,  351,  351,  351,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  351,  351,  351,

      351,  442,  499,  945,  743,  442,  499,  743,  757,  944,
      443,  444,  445,  743,  927,  446,  902,  902,  902,  447,
      448,  757,  501,  928,  449,  386,  501,  757,  450,  451,
      351,  351,  352,  351,  351,  351,  351,  353,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  354,  354,  351,
      351,  351,  351,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  351,  351,  351,  351,
      573,  397,  937,  937,  937,  573,  573,  573,  943,  505,

      573,  386,  573,  505,  846,  795,  847,  573,  573,  574,
      405,  357,  577,  942,  792,  357,  358,  577,  577,  577,
      358,  370,  577,  793,  577,  370,  941,  940,  906,  577,
      577,  577,  589,  590,  591,  592,  939,  593,  962,  962,
      962,  594,  595,  936,  431,  495,  596,  386,  431,  495,
      597,  598,  479,  499,  929,  501,  624,  499,  793,  501,
      505,  624,  624,  624,  505,  358,  624,  370,  625,  358,
      926,  370,  925,  624,  624,  624,  733,  733,  734,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  358,  358,  358,  733,  733,  733,

      733,  733,  733,  358,  358,  733,  733,  733,  733,  358,
      358,  358,  358,  358,  358,  358,  358,  735,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  733,  733,  733,  733,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  358,  358,  358,  801,  801,  801,
      801,  801,  801,  358,  358,  801,  801,  801,  801,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  801,  801,  801,  801,  847,  796,  847,  852,

      852,  852,  852,  852,  852,  924,  792,  862,  862,  862,
      923,  863,  815,  815,  815,  793,  386,  922,  729,  921,
      920,  729,  895,  851,  896,  896,  852,  896,  897,  898,
      899,  617,  792,  698,  919,  792,  899,  899,  899,  935,
      698,  793,  698,  935,  793,  918,  917,  729,  916,  915,
      793,  876,  914,  729,  913,  729,  729,  912,  899,  899,
      899,  864,  911,  903,  903,  903,  865,  863,  930,  898,
      931,  910,  386,  931,  899,  931,  793,  729,  792,  793,
      909,  908,  729,  792,  932,  933,  934,  793,  907,  866,
      729,  906,  793,  904,  934,  934,  934,  934,  934,  934,

      938,  938,  938,  729,  863,  956,  933,  957,  853,  386,
      894,  893,  729,  729,  892,  792,  729,  864,  957,  934,
      957,  891,  793,  890,  793,  889,  888,  793,  792,  887,
      958,  959,  960,  960,  960,  960,  885,  793,  729,  960,
      960,  960,  964,  964,  964,  884,  863,  883,  729,  729,
      882,  729,  729,  881,  864,  976,  959,  977,  729,  793,
      963,  963,  963,  880,  863,  792,  977,  960,  977,  386,
      879,  878,  793,  877,  793,  876,  792,  874,  978,  979,
      980,  980,  980,  980,  729,  793,  873,  729,  980,  980,
      980,  872,  871,  729,  870,  869,  864,  729,  868,  867,

      729,  982,  982,  982,  983,  983,  983,  729,  863,  793,
      386,  866,  860,  386,  864,  984,  984,  984,  808,  859,
      793,  991,  979,  992,  992,  980,  992,  993,  994,  995,
      805,  792,  729,  854,  792,  729,  995,  995,  995,  853,
      793,  360,  729,  793,  845,  638,  729,  995,  995,  995,
      996,  996,  996,  638,  844,  729,  842,  841,  864,  386,
      840,  997,  997,  997,  839,  863,  729,  838,  837,  864,
      386,  998,  998,  998,  836,  793,  835,  834,  793,  833,
      832,  729,  831, 1002,  994, 1003, 1003,  995, 1003,  830,
      729,  829,  828,  792,  827,  822,  792, 1004, 1005, 1006,

      821,  729,  793,  820,  819,  793,  818, 1006, 1006, 1006,
     1006, 1006, 1006,  817,  816,  864,  729,  814, 1007, 1007,
     1007, 1009, 1009, 1009,  813,  864,  729,  386,  812,  729,
     1008, 1008, 1008,  750,  863,  551,  551,  793,  666,  386,
      793,  808,  807, 1011, 1005, 1012, 1012, 1006, 1012,  806,
      805,  729,  804,  792,  656,  798,  792, 1013, 1014, 1015,
      797,  729,  793,  725,  729,  793, 1015, 1015, 1015, 1015,
     1015, 1015, 1016, 1016, 1016,  864,  729,  788, 1017, 1017,
     1017,  386,  863,  638,  864,  729,  785,  386,  729, 1018,
     1018, 1018,  784, 1020, 1014, 1021,  755,  793,  714,  713,

      793,  709,  708,  792,  775, 1021, 1015, 1021, 1013, 1014,
     1015,  729,  793,  774,  773,  792, 1015, 1015, 1015,  772,
      729,  771,  770,  729,  793,  769,  767,  729,  766, 1015,
     1015, 1015,  864,  765,  764,  729, 1022, 1022, 1022,  763,
     1023, 1023, 1023,  864,  863,  386,  762,  793,  729,  386,
     1024, 1024, 1024, 1020, 1014, 1021, 1021, 1015, 1021,  793,
      761,  760,  729,  792,  759,  758,  792, 1025, 1025, 1025,
      729,  684,  793,  405,  551,  793,  386, 1026, 1026, 1026,
      747,  863,  746,  729,  742,  741,  386, 1027, 1027, 1027,
     1028, 1028, 1028,  740,  864,  739, 1029, 1029, 1029,  386,

      863, 1030, 1030, 1030,  864,  386,  738,  793,  737,  736,
      793, 1031, 1031, 1031, 1032, 1032, 1032,  731,  863,  730,
      386,  653,  725,  386, 1033, 1033, 1033, 1034, 1034, 1034,
      723,  864,  648, 1035, 1035, 1035,  386,  863, 1036, 1036,
     1036,  864,  386, 1037, 1037, 1037,  648, 1038, 1038, 1038,
      864,  863,  386,  638,  638,  864,  386, 1039, 1039, 1039,
     1040, 1040, 1040, 1041, 1041, 1041,  719,  863,  864,  386,
      718,  717,  386, 1042, 1042, 1042,  716,  715,  864, 1043,
     1043, 1043, 1044, 1044, 1044,  714,  863,  864,  386,  713,
      710,  386,  864, 1045, 1045, 1045, 1046, 1046, 1046,  709,

      708,  864, 1048, 1048, 1048,  386, 1047, 1047, 1047,  705,
      863,  864, 1049, 1049, 1049,  386,  704,  864, 1051, 1051,
     1051,  386, 1050, 1050, 1050,  703,  863,  864, 1052, 1052,
     1052,  386, 1054, 1054, 1054,  702,  864,  386,  701, 1053,
     1053, 1053,  700,  863, 1055, 1055, 1055,  864,  386,  699,
     1056, 1056, 1056,  386,  863,  694,  864,  693,  692,  386,
      864, 1057, 1057, 1057, 1058, 1058, 1058, 1060, 1060, 1060,
      691,  690,  864,  386,  689,  687,  864,  686, 1059, 1059,
     1059,  685,  863, 1061, 1061, 1061,  864,  386, 1063, 1063,
     1063,  684,  386,  864, 1062, 1062, 1062,  648,  863, 1064,

     1064, 1064,  582,  386,  864, 1065, 1065, 1065,  386,  863,
     1066, 1066, 1066,  683,  386,  864, 1067, 1067, 1067,  405,
      405,  864, 1068, 1068, 1068,  386,  863, 1069, 1069, 1069,
      679,  386,  864,  674, 1070, 1070, 1070, 1071, 1071, 1071,
      674,  863,  864,  386,  551,  551,  386,  548,  864, 1072,
     1072, 1072, 1073, 1073, 1073,  669, 1074, 1074, 1074,  864,
      863,  386,  668,  667,  864,  386, 1075, 1075, 1075, 1076,
     1076, 1076,  666, 1077, 1077, 1077,  864,  863,  386,  665,
      664,  864,  386, 1078, 1078, 1078, 1079, 1079, 1079,  663,
      662,  864, 1080, 1080, 1080,  386,  863, 1081, 1081, 1081,

      661,  386,  660,  864, 1082, 1082, 1082, 1083, 1083, 1083,
      864,  863,  659,  386,  658,  657,  386, 1084, 1084, 1084,
      864, 1085, 1085, 1085, 1086, 1086, 1086,  864,  863,  656,
      386,  655,  654,  386, 1087, 1087, 1087,  864, 1088, 1088,
     1088, 1089, 1089, 1089,  653,  863,  864,  386,  648,  647,
      386,  864, 1090, 1090, 1090, 1091, 1091, 1091, 1092, 1092,
     1092,  864,  863,  591,  386,  522,  521,  386, 1093, 1093,
     1093,  864, 1094, 1094, 1094, 1095, 1095, 1095,  864,  863,
      641,  386,  638,  506,  386, 1096, 1096, 1096,  864, 1097,
     1097, 1097, 1098, 1098, 1098,  864,  863,  636,  386,  521,

      635,  386, 1099, 1099, 1099,  496,  864, 1100, 1100, 1100,
      633,  632,  864, 1102, 1102, 1102,  386, 1101, 1101, 1101,
      630,  863,  864, 1103, 1103, 1103,  386,  521,  627,  864,
      623,  622,  386, 1104, 1104, 1104,  621,  863,  620,  864,
      477,  476,  386, 1105, 1105, 1105,  864,  616, 1106, 1106,
     1106, 1107, 1107, 1107,  521,  863,  864,  386,  614,  612,
      386, 1108, 1108, 1108, 1109, 1109, 1109,  864, 1110, 1110,
     1110,  864,  863,  386, 1111, 1111, 1111,  386,  611, 1112,
     1112, 1112, 1113, 1113, 1113,  610,  863,  864,  386,  458,
      457,  386, 1114, 1114, 1114,  607,  606,  864, 1115, 1115,

     1115,  605, 1116, 1116, 1116,  864,  863,  386, 1117, 1117,
     1117,  386, 1118, 1118, 1118,  864, 1119, 1119, 1119,  604,
      863,  386,  864,  603,  602,  386,  601,  600,  864, 1120,
     1120, 1120, 1121, 1121, 1121,  599,  864,  587, 1122, 1122,
     1122,  386,  863, 1123, 1123, 1123,  864,  386, 1124, 1124,
     1124, 1125, 1125, 1125,  432,  863,  864,  386,  582,  428,
      386,  581,  864, 1126, 1126, 1126, 1127, 1127, 1127,  580,
      864,  420, 1128, 1128, 1128,  386,  863, 1129, 1129, 1129,
      419,  386,  418,  864, 1130, 1130, 1130, 1131, 1131, 1131,
      419,  863,  864,  386,  579,  409,  386,  864, 1132, 1132,

     1132, 1133, 1133, 1133,  405,  864,  569, 1134, 1134, 1134,
      386,  863, 1135, 1135, 1135,  568,  386,  864, 1136, 1136,
     1136, 1137, 1137, 1137,  388,  863,  864,  386,  562,  551,
      386,  864, 1138, 1138, 1138, 1139, 1139, 1139, 1140, 1140,
     1140,  864,  863,  546,  386,  543,  541,  386, 1141, 1141,
     1141,  539,  864, 1142, 1142, 1142, 1143, 1143, 1143,  538,
      863,  864,  386,  537,  536,  386,  864, 1144, 1144, 1144,
     1145, 1145, 1145,  532,  529,  864, 1146, 1146, 1146,  386,
      863, 1147, 1147, 1147,  528,  386,  864, 1148, 1148, 1148,
      522,  521,  864, 1150, 1150, 1150,  386, 1149, 1149, 1149,

      518,  863,  864, 1151, 1151, 1151,  386, 1152, 1152, 1152,
      864,  863,  386, 1153, 1153, 1153,  386, 1154, 1154, 1154,
      350,  864,  350, 1155, 1155, 1155,  386,  863,  350,  509,
      864,  350,  386,  350,  350,  864, 1156, 1156, 1156, 1157,
     1157, 1157, 1159, 1159, 1159,  500,  350,  864,  386,  498,
      350,  864,  494, 1158, 1158, 1158,  490,  863, 1162, 1162,
     1162,  864,  386, 1160, 1160, 1160,  487,  864,  477, 1161,
     1161, 1161,  386,  863, 1163, 1163, 1163,  864,  386,  476,
     1164, 1164, 1164,  386,  863, 1165, 1165, 1165,  467,  386,
      864, 1166, 1166, 1166,  466,  464,  864, 1167, 1167, 1167,

      386,  863, 1168, 1168, 1168,  462,  386,  864, 1169, 1169,
     1169,  460,  864, 1171, 1171, 1171,  458,  386, 1170, 1170,
     1170,  457,  863,  864, 1172, 1172, 1172,  386, 1173, 1173,
     1173,  441,  863,  386,  864,  438,  350,  386,  350,  864,
     1174, 1174, 1174, 1175, 1175, 1175, 1176, 1176, 1176,  350,
      863,  864,  386,  428,  425,  386,  864, 1177, 1177, 1177,
     1178, 1178, 1178,  421, 1179, 1179, 1179,  864,  863,  386,
      420,  419,  864,  386, 1180, 1180, 1180, 1181, 1181, 1181,
      418,  405,  864, 1182, 1182, 1182,  386,  863, 1183, 1183,
     1183,  405,  386,  405,  864, 1184, 1184, 1184,  405,  394,

      864, 1185, 1185, 1185,  386,  863, 1186, 1186, 1186,  350,
      386,  864, 1187, 1187, 1187, 1188, 1188, 1188,  864,  863,
      384,  386,  381,  377,  386, 1189, 1189, 1189,  864, 1190,
     1190, 1190, 1191, 1191, 1191,  376,  863,  864,  386,  373,
      350,  386,  864, 1192, 1192, 1192,  367, 1193, 1193, 1193,
     1194, 1194, 1194,  366,  863,  864,  386,  360,  359,  386,
      864, 1195, 1195, 1195, 1196, 1196, 1196,  350,  350,  864,
     1198, 1198, 1198,  386, 1197, 1197, 1197,  350,  863,  864,
     1199, 1199, 1199,  386, 1315, 1315,  864, 1315, 1315,  386,
     1200, 1200, 1200, 1315,  863, 1315, 1315,  864, 1315,  386,

     1201, 1201, 1201, 1315,  864, 1202, 1202, 1202, 1203, 1203,
     1203, 1315,  863, 1315,  386,  864, 1315,  386, 1204, 1204,
     1204, 1205, 1205, 1205,  864, 1206, 1206, 1206,  864,  863,
      386, 1207, 1207, 1207,  386, 1315, 1208, 1208, 1208, 1209,
     1209, 1209, 1315,  863,  864,  386, 1315, 1315,  386, 1210,
     1210, 1210, 1315, 1315,  864, 1211, 1211, 1211, 1315, 1212,
     1212, 1212,  864,  863,  386, 1213, 1213, 1213,  386, 1214,
     1214, 1214,  864, 1215, 1215, 1215, 1315,  863,  386,  864,
     1315, 1315,  386, 1315, 1315,  864, 1216, 1216, 1216, 1217,
     1217, 1217, 1315,  864, 1315, 1218, 1218, 1218,  386,  863,

     1219, 1219, 1219,  864,  386, 1220, 1220, 1220, 1221, 1221,
     1221, 1315,  863,  864,  386, 1315, 1315,  386, 1315,  864,
     1222, 1222, 1222, 1315, 1223, 1223, 1223,  864,  863, 1224,
     1224, 1224, 1315,  386, 1225, 1225, 1225, 1315,  863, 1315,
      864, 1315, 1315,  386, 1226, 1226, 1226, 1315, 1315,  864,
     1315, 1227, 1227, 1227,  864,  863, 1228, 1228, 1228, 1315,
      386, 1315,  864, 1229, 1229, 1229, 1315,  863, 1230, 1230,
     1230, 1315,  386, 1315,  864, 1231, 1231, 1231,  864,  863,
     1232, 1232, 1232,  864,  386, 1233, 1233, 1233,  864,  863,
     1234, 1234, 1234, 1315,  386, 1235, 1235, 1235,  864, 1236,

     1236, 1236, 1237, 1237, 1237,  864, 1238, 1238, 1238, 1315,
      864, 1239, 1239, 1239, 1240, 1240, 1240,  864, 1241, 1241,
     1241, 1315,  864, 1242, 1242, 1242, 1243, 1243, 1243,  864,
     1244, 1244, 1244, 1315,  864, 1245, 1245, 1245, 1315,  864,
     1246, 1246, 1246, 1315,  864, 1247, 1247, 1247, 1315,  864,
     1248, 1248, 1248,  864, 1315, 1315,  864, 1249, 1249, 1249,
      864, 1250, 1250, 1250, 1315,  864, 1315, 1315,  864, 1251,
     1251, 1251,  864, 1252, 1252, 1252, 1315,  864, 1315, 1315,
      864, 1253, 1253, 1253,  864, 1254, 1254, 1254, 1315,  864,
     1255, 1255, 1255, 1315,  864, 1256, 1256, 1256, 1315,  864,

     1257, 1257, 1257, 1315,  864, 1258, 1258, 1258, 1259, 1259,
     1259,  864, 1260, 1260, 1260,  864, 1261, 1261, 1261, 1262,
     1262, 1262, 1315,  864, 1263, 1263, 1263,  864, 1264, 1264,
     1264, 1265, 1265, 1265, 1315,  864, 1266, 1266, 1266,  864,
     1267, 1267, 1267, 1315,  864, 1268, 1268, 1268, 1315,  864,
     1269, 1269, 1269, 1315,  864, 1270, 1270, 1270, 1315,  864,
     1315, 1315,  864, 1271, 1271, 1271,  864, 1272, 1272, 1272,
      864, 1315, 1315,  864, 1273, 1273, 1273, 1315,  864, 1274,
     1274, 1274,  864, 1315, 1315,  864, 1275, 1275, 1275, 1315,
      864, 1276, 1276, 1276,  864, 1277, 1277, 1277, 1315,  864,

     1278, 1278, 1278, 1315,  864, 1279, 1279, 1279, 1315,  864,
     1280, 1280, 1280, 1281, 1281, 1281, 1315,  864, 1282, 1282,
     1282,  864, 1283, 1283, 1283, 1284, 1284, 1284,  864, 1285,
     1285, 1285, 1315,  864, 1286, 1286, 1286, 1287, 1287, 1287,
      864, 1288, 1288, 1288, 1315,  864, 1289, 1289, 1289,  864,
     1290, 1290, 1290, 1315,  864, 1291, 1291, 1291, 1315,  864,
     1292, 1292, 1292, 1315,  864, 1315, 1315,  864, 1293, 1293,
     1293, 1315,  864, 1294, 1294, 1294,  864, 1315, 1315,  864,
     1295, 1295, 1295,  864, 1296, 1296, 1296, 1315,  864, 1315,
     1315,  864, 1297, 1297, 1297,  864, 1298, 1298, 1298, 1315,

      864, 1299, 1299, 1299,  864, 1300, 1300, 1300, 1315,  864,
     1301, 1301, 1301, 1315,  864, 1302, 1302, 1302, 1303, 1303,
     1303, 1315,  864, 1304, 1304, 1304, 1315,  864, 1305, 1305,
     1305, 1306, 1306, 1306,  864, 1307, 1307, 1307,  864, 1308,
     1308, 1308, 1309, 1309, 1309, 1315,  864, 1310, 1310, 1310,
      864, 1311, 1311, 1311, 1315,  864, 1312, 1312, 1312,  864,
     1313, 1313, 1313, 1315,  864, 1314, 1314, 1314, 1315,  864,
     1315, 1315,  864, 1238, 1238, 1238, 1315,  864, 1315, 1315,
     1315, 1315,  864, 1315, 1315,  864, 1315, 1315, 1315,  864,
     1315, 1315, 1315,  864, 1315, 1315,  864, 1315, 1315, 1315,

     1315,  864, 1315, 1315, 1315,  864, 1315, 1315, 1315, 1315,
      864, 1315, 1315, 1315,  864, 1315, 1315, 1315, 1315,  864,
     1315, 1315, 1315, 1315, 1315, 1315, 1315,  864,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  147,  147,  147,  147,  147,  147,  147,  147,  147,

      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  207,  207,  207,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      261,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,

      324,  324,  324,  324,  324,  324,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  374,  374,  374,
     1315,  374,  374, 1315,  374, 1315,  374,  374,  374,  374,
     1315,  374,  374,  374,  374,  374,  374,  374,  375,  375,
      375, 1315,  375,  375,  375,  375, 1315,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  378,
      378,  378, 1315,  378,  378, 1315,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378, 1315,  378,
      382,  382,  382, 1315,  382,  382,  382,  382,  382,  382,

      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  383,  383,  383, 1315,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  387,  387,  387, 1315, 1315, 1315, 1315,  387,
     1315, 1315, 1315, 1315,  387, 1315, 1315, 1315,  387,  391,
      391,  391, 1315, 1315,  391, 1315,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391, 1315,  391,
      395,  395,  395, 1315,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  396,  396,  396, 1315,  396,  396,  396,  396,  396,

      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  403, 1315, 1315, 1315, 1315, 1315, 1315,  403,
     1315, 1315, 1315, 1315,  403, 1315, 1315, 1315,  403,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404, 1315,  404,
      414,  414, 1315, 1315, 1315, 1315, 1315,  414, 1315, 1315,
     1315, 1315,  414, 1315, 1315, 1315,  414,  414,  424, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,  424, 1315,
      424, 1315, 1315, 1315,  424,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,

      434,  434,  434,  434,  434,  434,  437, 1315,  437, 1315,
      437,  437,  437,  437,  437,  437,  437, 1315,  437, 1315,
      437,  437,  437, 1315,  437,  459,  459,  459, 1315,  459,
      459,  459,  459,  459,  459,  459, 1315,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  463,  463,  463, 1315,
      463,  463,  463,  463,  463,  463,  463, 1315,  463,  463,
      463,  463,  463,  463, 1315,  463,  463,  478,  478,  478,
     1315,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478, 1315,  478, 1315,  478,  479,  479,
      479, 1315,  479,  479,  479,  479,  479,  479,  479,  479,

      479, 1315,  479,  479,  479, 1315,  479, 1315,  479,  480,
     1315,  480, 1315,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480, 1315,  480, 1315,  480,
      486, 1315,  486, 1315,  486,  486,  486,  486,  486,  486,
      486, 1315,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  491, 1315,  491, 1315,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  504,  504,  504, 1315,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  508,  508,  508, 1315,  508,  508,  508,

      508, 1315,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  513,  513,  513, 1315,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  514, 1315, 1315,  514, 1315,
      514, 1315,  514,  514, 1315,  514, 1315,  514, 1315, 1315,
     1315,  514,  515,  515,  515, 1315,  515, 1315,  515,  515,
      515,  515,  515, 1315,  515, 1315,  515,  515,  515, 1315,
      515, 1315,  515,  523, 1315, 1315,  523,  523,  523, 1315,
     1315,  523, 1315,  523,  523,  540,  540,  540, 1315,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,

      540,  540,  540,  540,  540,  540,  542,  542,  542, 1315,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  374,  374,  374,
     1315,  374,  374, 1315,  374, 1315,  374,  374,  374,  374,
     1315,  374,  374,  374,  374,  374,  374,  374,  550,  550,
      550, 1315,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550, 1315,  550,  552,
      552,  552, 1315,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      378,  378,  378, 1315,  378,  378, 1315,  378,  378,  378,

      378,  378,  378,  378,  378,  378,  378,  378,  378, 1315,
      378,  555,  555,  555, 1315,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  558,  558,  558, 1315,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  563,  563,  563, 1315,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  387,  387,  387, 1315, 1315, 1315,
     1315,  387, 1315, 1315, 1315, 1315,  387, 1315, 1315, 1315,
      387,  391,  391,  391, 1315, 1315,  391, 1315,  391,  391,

      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
     1315,  391,  396,  396,  396, 1315,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  403, 1315, 1315, 1315, 1315, 1315, 1315,
      403, 1315, 1315, 1315, 1315,  403, 1315, 1315, 1315,  403,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404, 1315,
      404,  414,  414, 1315, 1315, 1315, 1315, 1315,  414, 1315,
     1315, 1315, 1315,  414, 1315, 1315, 1315,  414,  414,  424,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,  424,

     1315,  424, 1315, 1315, 1315,  424,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  437, 1315,  437,
     1315,  437,  437,  437,  437,  437,  437,  437, 1315,  437,
     1315,  437,  437,  437, 1315,  437,  459,  459,  459, 1315,
      459,  459,  459,  459,  459,  459,  459, 1315,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  463,  463,  463,
     1315,  463,  463,  463,  463,  463,  463,  463, 1315,  463,
      463,  463,  463,  463,  463, 1315,  463,  463,  478,  478,
      478, 1315,  478,  478,  478,  478,  478,  478,  478,  478,

      478,  478,  478,  478,  478, 1315,  478, 1315,  478,  479,
      479,  479, 1315,  479,  479,  479,  479,  479,  479,  479,
      479,  479, 1315,  479,  479,  479, 1315,  479, 1315,  479,
      480, 1315,  480, 1315,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480, 1315,  480, 1315,
      480,  486, 1315,  486, 1315,  486,  486,  486,  486,  486,
      486,  486, 1315,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  491, 1315,  491, 1315,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  637,  637,  637, 1315,  637,  637,  637,

      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637, 1315,  637,  639,  639,  639, 1315,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  514, 1315, 1315,  514, 1315,
      514, 1315,  514,  514, 1315,  514, 1315,  514, 1315, 1315,
     1315,  514,  515,  515,  515, 1315,  515, 1315,  515,  515,
      515,  515,  515, 1315,  515, 1315,  515,  515,  515, 1315,
      515, 1315,  515,  649,  649,  649, 1315,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  652,  652,  652, 1315,  652,  652,

      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  540,  540,  540, 1315,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  542,  542,  542, 1315,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  670,  670,  670,
     1315,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670, 1315,  670,  374,  374,
      374, 1315,  374,  374, 1315,  374, 1315,  374,  374,  374,
      374, 1315,  374,  374,  374,  374,  374,  374,  374,  555,

      555,  555, 1315,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      556,  556,  556, 1315,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  558,  558,  558, 1315,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  559,  559,  559, 1315,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  378,  378,  378, 1315,  378,  378, 1315,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,

      378,  378, 1315,  378,  387,  387,  387, 1315, 1315, 1315,
     1315,  387, 1315, 1315, 1315, 1315,  387, 1315, 1315, 1315,
      387,  391,  391,  391, 1315, 1315,  391, 1315,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
     1315,  391,  396,  396,  396, 1315,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404, 1315,  404,  459,  459,  459, 1315,  459,  459,
      459,  459,  459,  459,  459, 1315,  459,  459,  459,  459,

      459,  459,  459,  459,  459,  720,  720,  720, 1315,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720, 1315,  720,  724,  724,  724, 1315,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  748,  748,  748,
     1315,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748, 1315,  748,  786,  786,
      786, 1315,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786, 1315,  786,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  900, 1315, 1315, 1315,  900, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315,  900, 1315, 1315,  900,  905,  905,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  905,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946, 1315,  946,  946,  946, 1315,  946,  946,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,

      955,  955,  955,  955, 1315,  955,  955,  955, 1315,  955,
      955,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966, 1315,  966,  966,  966, 1315,
      966,  966,   73, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315

    } ;

static yyconst flex_int16_t yy_chk[6394] =
    {   0,
        0,    1,  160,    1,    1,    2,    0,    2,    2,   41,
        3,  160,    3,    3,   78,   87,  166,    1,   78,   87,
       41,    2,  175,   96,   41,    1,    3,   96,  110,    2,
      154,  122,  110,   41,    3,  122,  175,   41,  166,   41,
       89,   89,   89,  129,  101,  102,  101,  129,  154,   89,
       89,  139,  102,  102,  113,  139,  113,  142,  142,    1,
      150,  167,  167,    2,  150,   41,  189,  189,    3,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    9,
      170,    9,    9,  165,    9,  240,  240, 1238,    9,   10,
      170,   10,   10,  165,   10,    9,  155,  165,   10,   11,
     1220,   11,   11,    9,   11,   10,   12,  179,   12,   12,
      357,   12,  179,   10,  155,   11,  141,  141,  141,  357,
      156,  579,   12,   11,  159,  141,  158,  185,   11,  195,

       12,  185,  157,  195, 1019,   12,  200,    9,  156,  157,
      579,  200,  159,  157,  158,  158,  245,   10,  204,  212,
      157,  226,  204,  212,  234,  226,  239,   11,  234,  249,
      239, 1010,  245,  249,   12,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   15,  361,   15,   15,   16,

       15,   16,   16, 1001,   16,  361,  248,  143,  143,  143,
      406,   15,  169,  169,  217,   16,  143,  274,  274,   15,
      406,  169,  248,   16,   15,  217,  218,   17,   16,   17,
       17,   18,   17,   18,   18,  258,   18,  218,  380,  258,
      169,  218,  250,   17,  217,  252, 1000,   18,  264,  380,
       17,   17,  264,   15,   18,   18,  218,   16,  250,  143,
      251,  252,  380,  271,  251,  999,  250,  271,  281,  251,
      217,  251,  281,  292,  300,  308,  416,  292,  300,  308,
      310,  310,  218,  320,  328,   17,  416,  320,  328,   18,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       21,  336,   21,   21,   22,  336,   22,   22,  371,  396,
       29,  241,   29,   29,  344,  990,   21,  371,  344,  346,
       22,  859,  241,  346,   21,  398,   29,  396,   22,   21,
      346,  356,  398,   22,   29,  354,  354,  354,  376,  376,
      356,  241,  384,  398,  354,  354,  401,  356,  356,  356,

      384,  384,  385,  385,  385,  401,  356,  356,   21,  989,
      426,  385,   22,   23,   23,  426,  859,  241,   29,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   30,   30,   30,   30,  403,   31,   30,   31,
       31,   32,  478,   32,   32,  403,  407,   33,   30,   33,
       33,  242,   34,   31,   34,   34,   30,   32,  478,  422,
      407,   31,  242,   33,  572,   32,  242,   37,   34,   37,

       37,   33,   38,  422,   38,   38,   34,  429,   42,   37,
      379,  242,  572,   37,   38,  429,  424,  379,   38,   42,
       30,   37,  456,   42,  363,   31,   38,  363,  399,   32,
      424,  988,   42,  363,  379,   33,   42,  242,   42,  399,
       34,   35,  373,   35,   35,  373,  399,  387,  387,  387,
      439,  373,  456,   35,  439,   37,  387,   35,  363,   43,
       38,   43,   43,  475,   42,   35,   35,  430,  363,  987,
       35,  470,   35,  411,  411,   43,  373,  435,  456,  430,
      509,  509,  435,   43,   43,  484,  373,  484,   43,   44,
      411,   44,   44,  475,  470,  414,  414,  517,   35,   35,

       36,   36,   36,   36,  414,   44,  390,  390,  390,  517,
      525,  525,   36,   44,   44,  390,   36,   43,   44,  475,
      470,  487,  516,  414,   36,   36,  487,  377,  575,   36,
      516,   36,  377,  377,  377,  573,  680,  377,  599,  377,
      524,  526,  575,  553,  377,  377,  377,   44,  599,  524,
      526,  553,  553,  573,  680,  390,  986,   36,   36,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   45,
      555,   45,   45,  452,   46,  558,   46,   46,  667,  600,
       47,   45,   47,   47,  452,   45,   46,  560,  737,   48,
       46,   48,   48,   45,  555,  600,   47,  737,   46,  558,
      624,  628,  381,  452,   47,   48,  628,  381,  381,  381,
      985,  560,  381,   48,  381,  557,  624,  667,  394,  381,
      381,  381,  673,  394,  394,  394,  557,   45,  394,  452,
      394,  656,   46,  565,  656,  394,  394,  394,   47,  557,
      656,  565,  565,  578,  578,  578,  673,   48,   49,   49,

       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   53,  441,
      975,  566,  566,  566,  441,  441,  441,  649,  649,  441,
      566,  441,  974,   53,   53,  973,  441,  441,  441,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   55,  685,   55,   55,   56,   55,   56,   56,
      972,   56,   57,  685,   57,   57,  734,  609,   55,  619,
      971,   57,   56,  567,  567,  567,   55,  453,   57,  592,
       56,   55,  567,  571,  640,   56,   57,   58,  453,   58,

       58,   57,  640,  640,  571,  666,   58,  609,  666,  619,
      592,  571,  706,   58,  666,  734,  970,  453,  567,  672,
       55,   58,  686,  706,   56,  707,   58,  672,  672,   61,
       57,   61,   61,  609,  836,  619,  969,  592,  686,  698,
      698,  698,  462,  453,  968,   61,  744,  462,  462,  462,
      836,  707,  462,   61,  462,   58,   59,   59,   61,  462,
      462,  462,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,  744,   62,   61,   62,   62,
      712,  967,  711,   65,  466,   65,   65,  471,   65,  466,

      466,  466,   62,  711,  466,  789,  466,  472,  471,   65,
       62,  466,  466,  466,  789,   62,  712,   65,  472,  965,
      676,  961,   65,  651,  651,  651,  954,  471,  676,  676,
      608,  722,  953,   66,  952,   66,   66,  472,   66,  722,
      722,  608,  651,  747,   62,   63,  747,   63,   63,   66,
       63,   65,  747,  471,   63,   63,   63,   66,  792,  792,
      608,   63,   66,  472,  951,  793,  490,  950,  618,   63,
       63,  490,  490,  490,  793,  949,  490,  651,  490,  618,
      948,  802,  494,  490,  490,  490,  608,  494,  494,  494,
      802,   66,  494,  804,  494,  757,  757,  757,  618,  494,

      494,  494,  804,   63,   64,  947,   64,   64,  945,   64,
      677,  677,  677,   64,   64,   64,  766,  766,  766,  677,
       64,  768,  768,  768,  618,  518,  848,  848,   64,   64,
      518,  518,  518,  944, 1335,  518,  943,  518, 1335,  942,
      710,  710,  518,  518,  518,  710,  752,  752,  752,  710,
      710,  784,  784,  784,  710,  752, 1336, 1337,  710,  710,
     1336, 1337,   64,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   71,  940,   71,   71,   71,  815,  815,
      815,  678,  678,  678,  799,   71,  653,  653,  653,   71,
      678,  725,  725,  725,  753,  753,  753,   71,   71,  936,
      855,  725,   71,  753,  926,  653,  726,  726,  726,  855,
      725,  727,  727,  727,  728,  728,  728,  765,  765,  765,
      794,  794,  794,  799,  925,  726,  924,  923,  678,  922,
      727,   71,   72,  728,   72,   72,   72, 1351,  753,  794,
      653, 1351,  805, 1361,   72,  725,  805, 1361,   72,  810,

      810,  810,  824,  824,  824,  893,   72,   72,  810,  921,
      726,   72,  805,  854,  893,  727,  854,  920,  728,  857,
      919,  765,  854,  857,  794,  826,  826,  826,  843,  843,
      843,  876,  876,  876,  906,  906,  906,  918,  917,  857,
       72,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,  214, 1362,  915,  860,  214, 1362,  860,  914,  913,
      214,  214,  214,  860,  927,  214,  861,  861,  861,  214,
      214,  912, 1363,  927,  214,  861, 1363,  911,  214,  214,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      400,  400,  902,  902,  902,  400,  400,  400,  910, 1365,

      400,  902,  400, 1365,  790,  790,  790,  400,  400,  400,
      408, 1371,  408,  909,  790, 1371, 1372,  408,  408,  408,
     1372, 1375,  408,  790,  408, 1375,  908,  907,  905,  408,
      408,  408,  442,  442,  442,  442,  904,  442,  937,  937,
      937,  442,  442,  901, 1390, 1400,  442,  937, 1390, 1400,
      442,  442,  483, 1401,  894, 1402,  483, 1401,  790, 1402,
     1403,  483,  483,  483, 1403, 1410,  483, 1413,  483, 1410,
      892, 1413,  891,  483,  483,  483,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,

      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  791,  791,  791,  795,

      795,  795,  796,  796,  796,  890,  791,  811,  811,  811,
      889,  811,  812,  812,  812,  791,  811,  888,  795,  887,
      886,  796,  846,  846,  846,  847,  847,  847,  850,  850,
      850,  885,  846,  884,  883,  847,  851,  851,  851, 1434,
      882,  846,  881, 1434,  847,  880,  879,  850,  878,  877,
      791,  875,  874,  795,  873,  851,  796,  872,  852,  852,
      852,  811,  871,  862,  862,  862,  812,  862,  895,  895,
      895,  870,  862,  896,  896,  896,  846,  852,  895,  847,
      869,  868,  850,  896,  897,  897,  897,  895,  867,  866,
      851,  865,  896,  863,  898,  898,  898,  899,  899,  899,

      903,  903,  903,  897,  903,  930,  930,  930,  853,  903,
      845,  844,  852,  898,  842,  930,  899,  862,  931,  931,
      931,  841,  895,  840,  930,  839,  838,  896,  931,  837,
      932,  932,  932,  933,  933,  933,  835,  931,  897,  934,
      934,  934,  939,  939,  939,  834,  939,  833,  898,  932,
      832,  899,  933,  831,  903,  956,  956,  956,  934,  930,
      938,  938,  938,  830,  938,  956,  957,  957,  957,  938,
      829,  828,  931,  827,  956,  823,  957,  822,  958,  958,
      958,  959,  959,  959,  932,  957,  821,  933,  960,  960,
      960,  820,  819,  934,  818,  817,  939,  958,  816,  814,

      959,  962,  962,  962,  963,  963,  963,  960,  963,  956,
      962,  813,  809,  963,  938,  964,  964,  964,  808,  807,
      957,  976,  976,  976,  977,  977,  977,  978,  978,  978,
      806,  976,  958,  800,  977,  959,  979,  979,  979,  798,
      976,  797,  960,  977,  788,  787,  978,  980,  980,  980,
      982,  982,  982,  786,  785,  979,  783,  782,  963,  982,
      781,  983,  983,  983,  780,  983,  980,  779,  778,  964,
      983,  984,  984,  984,  777,  976,  776,  775,  977,  774,
      773,  978,  772,  991,  991,  991,  992,  992,  992,  771,
      979,  770,  769,  991,  767,  764,  992,  993,  993,  993,

      763,  980,  991,  762,  761,  992,  760,  994,  994,  994,
      995,  995,  995,  759,  758,  983,  993,  756,  996,  996,
      996,  998,  998,  998,  755,  984,  994,  996,  754,  995,
      997,  997,  997,  751,  997,  749,  748,  991,  745,  997,
      992,  742,  741, 1002, 1002, 1002, 1003, 1003, 1003,  740,
      739,  993,  738, 1002,  735,  731, 1003, 1004, 1004, 1004,
      730,  994, 1002,  724,  995, 1003, 1005, 1005, 1005, 1006,
     1006, 1006, 1007, 1007, 1007,  998, 1004,  723, 1008, 1008,
     1008, 1007, 1008,  720,  997, 1005,  719, 1008, 1006, 1009,
     1009, 1009,  717, 1011, 1011, 1011,  716, 1002,  714,  713,

     1003,  709,  708, 1011,  705, 1012, 1012, 1012, 1013, 1013,
     1013, 1004, 1011,  704,  703, 1012, 1014, 1014, 1014,  702,
     1005,  701,  700, 1006, 1012,  699,  697, 1013,  696, 1015,
     1015, 1015, 1008,  695,  694, 1014, 1016, 1016, 1016,  693,
     1017, 1017, 1017, 1009, 1017, 1016,  692, 1011, 1015, 1017,
     1018, 1018, 1018, 1020, 1020, 1020, 1021, 1021, 1021, 1012,
      691,  690, 1013, 1020,  689,  687, 1021, 1022, 1022, 1022,
     1014,  684, 1020,  681,  670, 1021, 1022, 1023, 1023, 1023,
      669, 1023,  668, 1015,  664,  663, 1023, 1024, 1024, 1024,
     1025, 1025, 1025,  662, 1017,  661, 1026, 1026, 1026, 1025,

     1026, 1027, 1027, 1027, 1018, 1026,  660, 1020,  659,  658,
     1021, 1028, 1028, 1028, 1029, 1029, 1029,  655, 1029,  654,
     1028,  652,  650, 1029, 1030, 1030, 1030, 1031, 1031, 1031,
      647, 1023,  643, 1032, 1032, 1032, 1031, 1032, 1033, 1033,
     1033, 1024, 1032, 1034, 1034, 1034,  641, 1035, 1035, 1035,
     1026, 1035, 1034,  639,  637, 1027, 1035, 1036, 1036, 1036,
     1037, 1037, 1037, 1038, 1038, 1038,  635, 1038, 1029, 1037,
      632,  627, 1038, 1039, 1039, 1039,  626,  622, 1030, 1040,
     1040, 1040, 1041, 1041, 1041,  621, 1041, 1032, 1040,  620,
      616, 1041, 1033, 1042, 1042, 1042, 1043, 1043, 1043,  611,

      610, 1035, 1045, 1045, 1045, 1043, 1044, 1044, 1044,  607,
     1044, 1036, 1046, 1046, 1046, 1044,  606, 1038, 1048, 1048,
     1048, 1046, 1047, 1047, 1047,  605, 1047, 1039, 1049, 1049,
     1049, 1047, 1051, 1051, 1051,  604, 1041, 1049,  603, 1050,
     1050, 1050,  602, 1050, 1052, 1052, 1052, 1042, 1050,  601,
     1053, 1053, 1053, 1052, 1053,  598, 1045,  597,  596, 1053,
     1044, 1054, 1054, 1054, 1055, 1055, 1055, 1057, 1057, 1057,
      595,  594, 1048, 1055,  593,  591, 1047,  590, 1056, 1056,
     1056,  589, 1056, 1058, 1058, 1058, 1051, 1056, 1060, 1060,
     1060,  587, 1058, 1050, 1059, 1059, 1059,  584, 1059, 1061,

     1061, 1061,  582, 1059, 1053, 1062, 1062, 1062, 1061, 1062,
     1063, 1063, 1063,  581, 1062, 1054, 1064, 1064, 1064,  577,
      576, 1057, 1065, 1065, 1065, 1064, 1065, 1066, 1066, 1066,
      568, 1065, 1056,  564, 1067, 1067, 1067, 1068, 1068, 1068,
      563, 1068, 1060, 1067,  552,  550, 1068,  549, 1059, 1069,
     1069, 1069, 1070, 1070, 1070,  548, 1071, 1071, 1071, 1062,
     1071, 1070,  546,  545, 1063, 1071, 1072, 1072, 1072, 1073,
     1073, 1073,  544, 1074, 1074, 1074, 1065, 1074, 1073,  541,
      539, 1066, 1074, 1075, 1075, 1075, 1076, 1076, 1076,  538,
      537, 1068, 1077, 1077, 1077, 1076, 1077, 1078, 1078, 1078,

      536, 1077,  535, 1069, 1079, 1079, 1079, 1080, 1080, 1080,
     1071, 1080,  534, 1079,  532,  531, 1080, 1081, 1081, 1081,
     1072, 1082, 1082, 1082, 1083, 1083, 1083, 1074, 1083,  530,
     1082,  529,  528, 1083, 1084, 1084, 1084, 1075, 1085, 1085,
     1085, 1086, 1086, 1086,  527, 1086, 1077, 1085,  521,  520,
     1086, 1078, 1087, 1087, 1087, 1088, 1088, 1088, 1089, 1089,
     1089, 1080, 1089,  519, 1088,  512,  511, 1089, 1090, 1090,
     1090, 1081, 1091, 1091, 1091, 1092, 1092, 1092, 1083, 1092,
      510, 1091,  508,  507, 1092, 1093, 1093, 1093, 1084, 1094,
     1094, 1094, 1095, 1095, 1095, 1086, 1095,  503, 1094,  502,

      498, 1095, 1096, 1096, 1096,  497, 1087, 1097, 1097, 1097,
      493,  492, 1089, 1099, 1099, 1099, 1097, 1098, 1098, 1098,
      489, 1098, 1090, 1100, 1100, 1100, 1098,  488,  485, 1092,
      482,  481, 1100, 1101, 1101, 1101,  477, 1101,  476, 1093,
      474,  473, 1101, 1102, 1102, 1102, 1095,  469, 1103, 1103,
     1103, 1104, 1104, 1104,  468, 1104, 1096, 1103,  465,  461,
     1104, 1105, 1105, 1105, 1106, 1106, 1106, 1099, 1107, 1107,
     1107, 1098, 1107, 1106, 1108, 1108, 1108, 1107,  458, 1109,
     1109, 1109, 1110, 1110, 1110,  457, 1110, 1101, 1109,  455,
      454, 1110, 1111, 1111, 1111,  451,  450, 1102, 1112, 1112,

     1112,  449, 1113, 1113, 1113, 1104, 1113, 1112, 1114, 1114,
     1114, 1113, 1115, 1115, 1115, 1105, 1116, 1116, 1116,  448,
     1116, 1115, 1107,  447,  446, 1116,  445,  444, 1108, 1117,
     1117, 1117, 1118, 1118, 1118,  443, 1110,  440, 1119, 1119,
     1119, 1118, 1119, 1120, 1120, 1120, 1111, 1119, 1121, 1121,
     1121, 1122, 1122, 1122,  433, 1122, 1113, 1121,  428,  427,
     1122,  423, 1114, 1123, 1123, 1123, 1124, 1124, 1124,  421,
     1116,  420, 1125, 1125, 1125, 1124, 1125, 1126, 1126, 1126,
      419, 1125,  418, 1117, 1127, 1127, 1127, 1128, 1128, 1128,
      417, 1128, 1119, 1127,  415,  410, 1128, 1120, 1129, 1129,

     1129, 1130, 1130, 1130,  404, 1122,  393, 1131, 1131, 1131,
     1130, 1131, 1132, 1132, 1132,  392, 1131, 1123, 1133, 1133,
     1133, 1134, 1134, 1134,  389, 1134, 1125, 1133,  383,  375,
     1134, 1126, 1135, 1135, 1135, 1136, 1136, 1136, 1137, 1137,
     1137, 1128, 1137,  372, 1136,  369,  368, 1137, 1138, 1138,
     1138,  367, 1129, 1139, 1139, 1139, 1140, 1140, 1140,  366,
     1140, 1131, 1139,  365,  364, 1140, 1132, 1141, 1141, 1141,
     1142, 1142, 1142,  362,  360, 1134, 1143, 1143, 1143, 1142,
     1143, 1144, 1144, 1144,  359, 1143, 1135, 1145, 1145, 1145,
      349,  348, 1137, 1147, 1147, 1147, 1145, 1146, 1146, 1146,

      345, 1146, 1138, 1148, 1148, 1148, 1146, 1149, 1149, 1149,
     1140, 1149, 1148, 1150, 1150, 1150, 1149, 1151, 1151, 1151,
      337, 1141,  329, 1152, 1152, 1152, 1151, 1152,  321,  317,
     1143,  309, 1152,  301,  293, 1144, 1153, 1153, 1153, 1154,
     1154, 1154, 1156, 1156, 1156,  284,  282, 1147, 1154,  275,
      272, 1146,  265, 1155, 1155, 1155,  259, 1155, 1159, 1159,
     1159, 1149, 1155, 1157, 1157, 1157,  257, 1150,  244, 1158,
     1158, 1158, 1157, 1158, 1160, 1160, 1160, 1152, 1158,  243,
     1161, 1161, 1161, 1160, 1161, 1162, 1162, 1162,  238, 1161,
     1153, 1163, 1163, 1163,  235,  233, 1156, 1164, 1164, 1164,

     1163, 1164, 1165, 1165, 1165,  227, 1164, 1155, 1166, 1166,
     1166,  225, 1159, 1168, 1168, 1168,  220, 1166, 1167, 1167,
     1167,  219, 1167, 1158, 1169, 1169, 1169, 1167, 1170, 1170,
     1170,  213, 1170, 1169, 1161,  211,  205, 1170,  196, 1162,
     1171, 1171, 1171, 1172, 1172, 1172, 1173, 1173, 1173,  186,
     1173, 1164, 1172,  183,  176, 1173, 1165, 1174, 1174, 1174,
     1175, 1175, 1175,  174, 1176, 1176, 1176, 1168, 1176, 1175,
      173,  172, 1167, 1176, 1177, 1177, 1177, 1178, 1178, 1178,
      171,  168, 1170, 1179, 1179, 1179, 1178, 1179, 1180, 1180,
     1180,  164, 1179,  162, 1171, 1181, 1181, 1181,  161,  151,

     1173, 1182, 1182, 1182, 1181, 1182, 1183, 1183, 1183,  140,
     1182, 1174, 1184, 1184, 1184, 1185, 1185, 1185, 1176, 1185,
      138, 1184,  130,  123, 1185, 1186, 1186, 1186, 1177, 1187,
     1187, 1187, 1188, 1188, 1188,  121, 1188, 1179, 1187,  114,
      111, 1188, 1180, 1189, 1189, 1189,  104, 1190, 1190, 1190,
     1191, 1191, 1191,  103, 1191, 1182, 1190,  100,   99, 1191,
     1183, 1192, 1192, 1192, 1193, 1193, 1193,   97,   88, 1185,
     1195, 1195, 1195, 1193, 1194, 1194, 1194,   79, 1194, 1186,
     1196, 1196, 1196, 1194,   73,    0, 1188,    0,    0, 1196,
     1197, 1197, 1197,    0, 1197,    0,    0, 1189,    0, 1197,

     1198, 1198, 1198,    0, 1191, 1199, 1199, 1199, 1200, 1200,
     1200,    0, 1200,    0, 1199, 1192,    0, 1200, 1201, 1201,
     1201, 1202, 1202, 1202, 1195, 1203, 1203, 1203, 1194, 1203,
     1202, 1204, 1204, 1204, 1203,    0, 1205, 1205, 1205, 1206,
     1206, 1206,    0, 1206, 1197, 1205,    0,    0, 1206, 1207,
     1207, 1207,    0,    0, 1198, 1208, 1208, 1208,    0, 1209,
     1209, 1209, 1200, 1209, 1208, 1210, 1210, 1210, 1209, 1211,
     1211, 1211, 1201, 1212, 1212, 1212,    0, 1212, 1211, 1203,
        0,    0, 1212,    0,    0, 1204, 1213, 1213, 1213, 1214,
     1214, 1214,    0, 1206,    0, 1215, 1215, 1215, 1214, 1215,

     1216, 1216, 1216, 1207, 1215, 1217, 1217, 1217, 1218, 1218,
     1218,    0, 1218, 1209, 1217,    0,    0, 1218,    0, 1210,
     1219, 1219, 1219,    0, 1221, 1221, 1221, 1212, 1221, 1222,
     1222, 1222,    0, 1221, 1223, 1223, 1223,    0, 1223,    0,
     1213,    0,    0, 1223, 1224, 1224, 1224,    0,    0, 1215,
        0, 1225, 1225, 1225, 1216, 1225, 1226, 1226, 1226,    0,
     1225,    0, 1218, 1227, 1227, 1227,    0, 1227, 1228, 1228,
     1228,    0, 1227,    0, 1219, 1229, 1229, 1229, 1221, 1229,
     1230, 1230, 1230, 1222, 1229, 1231, 1231, 1231, 1223, 1231,
     1232, 1232, 1232,    0, 1231, 1233, 1233, 1233, 1224, 1234,

     1234, 1234, 1235, 1235, 1235, 1225, 1236, 1236, 1236,    0,
     1226, 1237, 1237, 1237, 1239, 1239, 1239, 1227, 1240, 1240,
     1240,    0, 1228, 1241, 1241, 1241, 1242, 1242, 1242, 1229,
     1243, 1243, 1243,    0, 1230, 1244, 1244, 1244,    0, 1231,
     1245, 1245, 1245,    0, 1232, 1246, 1246, 1246,    0, 1233,
     1247, 1247, 1247, 1234,    0,    0, 1235, 1248, 1248, 1248,
     1236, 1249, 1249, 1249,    0, 1237,    0,    0, 1239, 1250,
     1250, 1250, 1240, 1251, 1251, 1251,    0, 1241,    0,    0,
     1242, 1252, 1252, 1252, 1243, 1253, 1253, 1253,    0, 1244,
     1254, 1254, 1254,    0, 1245, 1255, 1255, 1255,    0, 1246,

     1256, 1256, 1256,    0, 1247, 1257, 1257, 1257, 1258, 1258,
     1258, 1248, 1259, 1259, 1259, 1249, 1260, 1260, 1260, 1261,
     1261, 1261,    0, 1250, 1262, 1262, 1262, 1251, 1263, 1263,
     1263, 1264, 1264, 1264,    0, 1252, 1265, 1265, 1265, 1253,
     1266, 1266, 1266,    0, 1254, 1267, 1267, 1267,    0, 1255,
     1268, 1268, 1268,    0, 1256, 1269, 1269, 1269,    0, 1257,
        0,    0, 1258, 1270, 1270, 1270, 1259, 1271, 1271, 1271,
     1260,    0,    0, 1261, 1272, 1272, 1272,    0, 1262, 1273,
     1273, 1273, 1263,    0,    0, 1264, 1274, 1274, 1274,    0,
     1265, 1275, 1275, 1275, 1266, 1276, 1276, 1276,    0, 1267,

     1277, 1277, 1277,    0, 1268, 1278, 1278, 1278,    0, 1269,
     1279, 1279, 1279, 1280, 1280, 1280,    0, 1270, 1281, 1281,
     1281, 1271, 1282, 1282, 1282, 1283, 1283, 1283, 1272, 1284,
     1284, 1284,    0, 1273, 1285, 1285, 1285, 1286, 1286, 1286,
     1274, 1287, 1287, 1287,    0, 1275, 1288, 1288, 1288, 1276,
     1289, 1289, 1289,    0, 1277, 1290, 1290, 1290,    0, 1278,
     1291, 1291, 1291,    0, 1279,    0,    0, 1280, 1292, 1292,
     1292,    0, 1281, 1293, 1293, 1293, 1282,    0,    0, 1283,
     1294, 1294, 1294, 1284, 1295, 1295, 1295,    0, 1285,    0,
        0, 1286, 1296, 1296, 1296, 1287, 1297, 1297, 1297,    0,

     1288, 1298, 1298, 1298, 1289, 1299, 1299, 1299,    0, 1290,
     1300, 1300, 1300,    0, 1291, 1301, 1301, 1301, 1302, 1302,
     1302,    0, 1292, 1303, 1303, 1303,    0, 1293, 1304, 1304,
     1304, 1305, 1305, 1305, 1294, 1306, 1306, 1306, 1295, 1307,
     1307, 1307, 1308, 1308, 1308,    0, 1296, 1309, 1309, 1309,
     1297, 1310, 1310, 1310,    0, 1298, 1311, 1311, 1311, 1299,
     1312, 1312, 1312,    0, 1300, 1313, 1313, 1313,    0, 1301,
        0,    0, 1302, 1314, 1314, 1314,    0, 1303,    0,    0,
        0,    0, 1304,    0,    0, 1305,    0,    0,    0, 1306,
        0,    0,    0, 1307,    0,    0, 1308,    0,    0,    0,

        0, 1309,    0,    0,    0, 1310,    0,    0,    0,    0,
     1311,    0,    0,    0, 1312,    0,    0,    0,    0, 1313,
        0,    0,    0,    0,    0,    0,    0, 1314, 1316, 1316,
     1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
     1318, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,

     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,
     1320, 1320, 1320, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1323, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1323, 1323, 1323, 1324, 1324, 1324, 1324,

     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1327,
     1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,

     1328, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1333, 1333, 1333, 1333, 1333,
     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,

     1333, 1333, 1333, 1333, 1333, 1333, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1338, 1338, 1338,
        0, 1338, 1338,    0, 1338,    0, 1338, 1338, 1338, 1338,
        0, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1339, 1339,
     1339,    0, 1339, 1339, 1339, 1339,    0, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1340,
     1340, 1340,    0, 1340, 1340,    0, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,    0, 1340,
     1341, 1341, 1341,    0, 1341, 1341, 1341, 1341, 1341, 1341,

     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
     1341, 1342, 1342, 1342,    0, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1343, 1343, 1343,    0,    0,    0,    0, 1343,
        0,    0,    0,    0, 1343,    0,    0,    0, 1343, 1344,
     1344, 1344,    0,    0, 1344,    0, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,    0, 1344,
     1345, 1345, 1345,    0, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1346, 1346, 1346,    0, 1346, 1346, 1346, 1346, 1346,

     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1347,    0,    0,    0,    0,    0,    0, 1347,
        0,    0,    0,    0, 1347,    0,    0,    0, 1347, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,    0, 1348,
     1349, 1349,    0,    0,    0,    0,    0, 1349,    0,    0,
        0,    0, 1349,    0,    0,    0, 1349, 1349, 1350,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1350,    0,
     1350,    0,    0,    0, 1350, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,

     1352, 1352, 1352, 1352, 1352, 1352, 1353,    0, 1353,    0,
     1353, 1353, 1353, 1353, 1353, 1353, 1353,    0, 1353,    0,
     1353, 1353, 1353,    0, 1353, 1354, 1354, 1354,    0, 1354,
     1354, 1354, 1354, 1354, 1354, 1354,    0, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1355, 1355, 1355,    0,
     1355, 1355, 1355, 1355, 1355, 1355, 1355,    0, 1355, 1355,
     1355, 1355, 1355, 1355,    0, 1355, 1355, 1356, 1356, 1356,
        0, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356,    0, 1356,    0, 1356, 1357, 1357,
     1357,    0, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,

     1357,    0, 1357, 1357, 1357,    0, 1357,    0, 1357, 1358,
        0, 1358,    0, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358,    0, 1358,    0, 1358,
     1359,    0, 1359,    0, 1359, 1359, 1359, 1359, 1359, 1359,
     1359,    0, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1360,    0, 1360,    0, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1364, 1364, 1364,    0, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1366, 1366, 1366,    0, 1366, 1366, 1366,

     1366,    0, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1367, 1367, 1367,    0, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1368,    0,    0, 1368,    0,
     1368,    0, 1368, 1368,    0, 1368,    0, 1368,    0,    0,
        0, 1368, 1369, 1369, 1369,    0, 1369,    0, 1369, 1369,
     1369, 1369, 1369,    0, 1369,    0, 1369, 1369, 1369,    0,
     1369,    0, 1369, 1370,    0,    0, 1370, 1370, 1370,    0,
        0, 1370,    0, 1370, 1370, 1373, 1373, 1373,    0, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,

     1373, 1373, 1373, 1373, 1373, 1373, 1374, 1374, 1374,    0,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1376, 1376, 1376,
        0, 1376, 1376,    0, 1376,    0, 1376, 1376, 1376, 1376,
        0, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1377, 1377,
     1377,    0, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377,    0, 1377, 1378,
     1378, 1378,    0, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
     1379, 1379, 1379,    0, 1379, 1379,    0, 1379, 1379, 1379,

     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,    0,
     1379, 1380, 1380, 1380,    0, 1380, 1380, 1380, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1380, 1380, 1381, 1381, 1381,    0, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1382, 1382, 1382,    0, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1383, 1383, 1383,    0,    0,    0,
        0, 1383,    0,    0,    0,    0, 1383,    0,    0,    0,
     1383, 1384, 1384, 1384,    0,    0, 1384,    0, 1384, 1384,

     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
        0, 1384, 1385, 1385, 1385,    0, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1386,    0,    0,    0,    0,    0,    0,
     1386,    0,    0,    0,    0, 1386,    0,    0,    0, 1386,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,    0,
     1387, 1388, 1388,    0,    0,    0,    0,    0, 1388,    0,
        0,    0,    0, 1388,    0,    0,    0, 1388, 1388, 1389,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1389,

        0, 1389,    0,    0,    0, 1389, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1392,    0, 1392,
        0, 1392, 1392, 1392, 1392, 1392, 1392, 1392,    0, 1392,
        0, 1392, 1392, 1392,    0, 1392, 1393, 1393, 1393,    0,
     1393, 1393, 1393, 1393, 1393, 1393, 1393,    0, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1394, 1394, 1394,
        0, 1394, 1394, 1394, 1394, 1394, 1394, 1394,    0, 1394,
     1394, 1394, 1394, 1394, 1394,    0, 1394, 1394, 1395, 1395,
     1395,    0, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,

     1395, 1395, 1395, 1395, 1395,    0, 1395,    0, 1395, 1396,
     1396, 1396,    0, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396,    0, 1396, 1396, 1396,    0, 1396,    0, 1396,
     1397,    0, 1397,    0, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397,    0, 1397,    0,
     1397, 1398,    0, 1398,    0, 1398, 1398, 1398, 1398, 1398,
     1398, 1398,    0, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1399,    0, 1399,    0, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1404, 1404, 1404,    0, 1404, 1404, 1404,

     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404,
     1404, 1404,    0, 1404, 1405, 1405, 1405,    0, 1405, 1405,
     1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405,
     1405, 1405, 1405, 1405, 1405, 1406,    0,    0, 1406,    0,
     1406,    0, 1406, 1406,    0, 1406,    0, 1406,    0,    0,
        0, 1406, 1407, 1407, 1407,    0, 1407,    0, 1407, 1407,
     1407, 1407, 1407,    0, 1407,    0, 1407, 1407, 1407,    0,
     1407,    0, 1407, 1408, 1408, 1408,    0, 1408, 1408, 1408,
     1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
     1408, 1408, 1408, 1408, 1409, 1409, 1409,    0, 1409, 1409,

     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1411, 1411, 1411,    0, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 1412, 1412, 1412,    0,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1414, 1414, 1414,
        0, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414,
     1414, 1414, 1414, 1414, 1414, 1414,    0, 1414, 1415, 1415,
     1415,    0, 1415, 1415,    0, 1415,    0, 1415, 1415, 1415,
     1415,    0, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1416,

     1416, 1416,    0, 1416, 1416, 1416, 1416, 1416, 1416, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416,
     1417, 1417, 1417,    0, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1418, 1418, 1418,    0, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1419, 1419, 1419,    0, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1420, 1420, 1420,    0, 1420, 1420,    0,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,

     1420, 1420,    0, 1420, 1421, 1421, 1421,    0,    0,    0,
        0, 1421,    0,    0,    0,    0, 1421,    0,    0,    0,
     1421, 1422, 1422, 1422,    0,    0, 1422,    0, 1422, 1422,
     1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422,
        0, 1422, 1423, 1423, 1423,    0, 1423, 1423, 1423, 1423,
     1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423,
     1423, 1423, 1423, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424,    0, 1424, 1425, 1425, 1425,    0, 1425, 1425,
     1425, 1425, 1425, 1425, 1425,    0, 1425, 1425, 1425, 1425,

     1425, 1425, 1425, 1425, 1425, 1426, 1426, 1426,    0, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426,    0, 1426, 1427, 1427, 1427,    0,
     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1428, 1428, 1428,
        0, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428,    0, 1428, 1429, 1429,
     1429,    0, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429,    0, 1429, 1430,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,

     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1432,    0,    0,    0, 1432,    0,    0,    0,    0,
        0,    0,    0,    0, 1432,    0,    0, 1432, 1433, 1433,
     1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433,
     1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1435,
     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
     1435, 1435, 1435,    0, 1435, 1435, 1435,    0, 1435, 1435,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,

     1436, 1436, 1436, 1436,    0, 1436, 1436, 1436,    0, 1436,
     1436, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437,    0, 1437, 1437, 1437,    0,
     1437, 1437, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315

    } ;

extern int preYY_flex_debug;
int preYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *preYYtext;
#line 1 "pre.l"
/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2015 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "pre.l"

/*
 *	includes
 */

#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <errno.h>

#include <qarray.h>
#include <qstack.h>
#include <qfile.h>
#include <qstrlist.h>
#include <qdict.h>
#include <qregexp.h>
#include <qfileinfo.h>
#include <qdir.h>
  
#include "pre.h"
#include "constexp.h"
#include "define.h"
#include "doxygen.h"
#include "message.h"
#include "util.h"
#include "defargs.h"
#include "debug.h"
#include "bufstr.h"
#include "portable.h"
#include "bufstr.h"
#include "arguments.h"
#include "entry.h"
#include "condparser.h"
#include "config.h"
#include "filedef.h"
#include "memberdef.h"
#include "membername.h"

#define YY_NO_UNISTD_H 1

// Toggle for some debugging info
//#define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

struct CondCtx
{
  CondCtx(int line,QCString id,bool b) 
    : lineNr(line),sectionId(id), skip(b) {}
  int lineNr;
  QCString sectionId;
  bool skip;
};

struct FileState
{
  FileState(int size) : lineNr(1), fileBuf(size),
                        oldFileBuf(0), oldFileBufPos(0), bufState(0) {}
  int lineNr;
  BufStr fileBuf;
  BufStr *oldFileBuf;
  int oldFileBufPos;
  YY_BUFFER_STATE bufState;
  QCString fileName;
};  

/** @brief Singleton that manages the defines available while 
 *  proprocessing files. 
 */
class DefineManager
{
  /** Local class used to hold the defines for a single file */
  class DefinesPerFile
  {
    public:
      /** Creates an empty container for defines */
      DefinesPerFile() : m_defines(257), m_includedFiles(17)
      {
        m_defines.setAutoDelete(TRUE);
      }
      /** Destroys the object */
      virtual ~DefinesPerFile()
      {
      }
      /** Adds a define in the context of a file. Will replace 
       *  an existing define with the same name (redefinition)
       *  @param def The Define object to add.
       */
      void addDefine(Define *def)
      {
	Define *d = m_defines.find(def->name);
	if (d!=0) // redefine
	{
	  m_defines.remove(d->name);
	}
	m_defines.insert(def->name,def);
      }
      /** Adds an include file for this file 
       *  @param fileName The name of the include file
       */
      void addInclude(const char *fileName)
      {
	m_includedFiles.insert(fileName,(void*)0x8);
      }
      void collectDefines(DefineDict *dict,QDict<void> &includeStack);
    private:
      DefineDict m_defines;
      QDict<void> m_includedFiles;
  };

  public:
    friend class DefinesPerFile;
    /** Returns a reference to the singleton */
    static DefineManager &instance()
    {
      if (theInstance==0) theInstance = new DefineManager;
      return *theInstance;
    }
    /** Deletes the singleton */
    static void deleteInstance()
    {
      delete theInstance;
      theInstance = 0;
    }
    /** Starts a context in which defines are collected. 
     *  Called at the start of a new file that is preprocessed.
     *  @param fileName the name of the file to process.
     */
    void startContext(const char *fileName)
    {
      //printf("DefineManager::startContext()\n");
      m_contextDefines.clear();
      if (fileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	//printf("New file!\n");
	dpf = new DefinesPerFile;
	m_fileMap.insert(fileName,dpf);
      }
    }
    /** Ends the context started with startContext() freeing any
     *  defines collected within in this context.
     */
    void endContext()
    {
      //printf("DefineManager::endContext()\n");
      m_contextDefines.clear();
    }
    /** Add an included file to the current context.
     *  If the file has been pre-processed already, all defines are added
     *  to the context.
     *  @param fileName The name of the include file to add to the context.
     */
    void addFileToContext(const char *fileName)
    {
      if (fileName==0) return;
      //printf("DefineManager::addFileToContext(%s)\n",fileName);
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	//printf("New file!\n");
	dpf = new DefinesPerFile;
	m_fileMap.insert(fileName,dpf);
      }
      else
      {
	//printf("existing file!\n");
	QDict<void> includeStack(17);
	dpf->collectDefines(&m_contextDefines,includeStack);
      }
    }

    /** Add a define to the manager object.
     *  @param fileName The file in which the define was found
     *  @param def The Define object to add.
     */
    void addDefine(const char *fileName,Define *def)
    {
      if (fileName==0) return;
      //printf("DefineManager::addDefine(%s,%s)\n",fileName,def->name.data());
      Define *d = m_contextDefines.find(def->name);
      if (d!=0) // redefine
      {
	m_contextDefines.remove(d->name);
      }
      m_contextDefines.insert(def->name,def);

      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	dpf = new DefinesPerFile;
	m_fileMap.insert(fileName,dpf);
      }
      dpf->addDefine(def);
    }

    /** Add an include relation to the manager object.
     *  @param fromFileName file name in which the include was found.
     *  @param toFileName file name that is included.
     */
    void addInclude(const char *fromFileName,const char *toFileName)
    {
      //printf("DefineManager::addInclude(%s,%s)\n",fromFileName,toFileName);
      if (fromFileName==0 || toFileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fromFileName);
      if (dpf==0)
      {
	dpf = new DefinesPerFile;
	m_fileMap.insert(fromFileName,dpf);
      }
      dpf->addInclude(toFileName);
    }
    /** Returns a Define object given its name or 0 if the Define does
     *  not exist.
     */
    Define *isDefined(const char *name) const
    {
      Define *d = m_contextDefines.find(name);
      if (d && d->undef) d=0;
      //printf("isDefined(%s)=%p\n",name,d);
      return d;
    }
    /** Returns a reference to the defines found in the current context. */
    const DefineDict &defineContext() const
    {
      return m_contextDefines;
    }
  private:
    static DefineManager *theInstance;

    /** Helper function to collect all define for a given file */
    void collectDefinesForFile(const char *fileName,DefineDict *dict)
    {
      if (fileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf)
      {
	QDict<void> includeStack(17);
	dpf->collectDefines(dict,includeStack);
      }
    }

    /** Helper function to return the DefinesPerFile object for a given file name. */
    DefinesPerFile *find(const char *fileName) const
    {
      if (fileName==0) return 0;
      return m_fileMap.find(fileName);
    }

    /** Creates a new DefineManager object */
    DefineManager() : m_fileMap(1009), m_contextDefines(1009)
    {
      m_fileMap.setAutoDelete(TRUE);
    }

    /** Destroys the object */
    virtual ~DefineManager() 
    {
    }

    QDict<DefinesPerFile> m_fileMap;
    DefineDict m_contextDefines;
};

/** Singleton instance */
DefineManager *DefineManager::theInstance = 0;

/** Collects all defines for a file and all files that the file includes.
 *  This function will recursively call itself for each file.
 *  @param dict The dictionary to fill with the defines. A redefine will
 *         replace a previous definition.
 *  @param includeStack The stack of includes, used to stop recursion in
 *         case there is a cyclic include dependency.
 */
void DefineManager::DefinesPerFile::collectDefines(
                     DefineDict *dict,QDict<void> &includeStack)
{
  //printf("DefinesPerFile::collectDefines #defines=%d\n",m_defines.count());
  {
    QDictIterator<void> di(m_includedFiles);
    for (di.toFirst();(di.current());++di)
    {
      QCString incFile = di.currentKey();
      DefinesPerFile *dpf = DefineManager::instance().find(incFile);
      if (dpf && includeStack.find(incFile)==0) 
      {
        //printf("  processing include %s\n",incFile.data());
	includeStack.insert(incFile,(void*)0x8);
	dpf->collectDefines(dict,includeStack);
      }
    }
  }
  {
    QDictIterator<Define> di(m_defines);
    Define *def;
    for (di.toFirst();(def=di.current());++di)
    {
      Define *d = dict->find(def->name);
      if (d!=0) // redefine
      {
	dict->remove(d->name);
      }
      dict->insert(def->name,def);
      //printf("  adding define %s\n",def->name.data());
    }
  }
}

/* -----------------------------------------------------------------
 *
 *	scanner's state
 */

static int                g_yyLineNr   = 1;
static int                g_yyMLines   = 1;
static int                g_yyColNr   = 1;
static QCString           g_yyFileName;
static FileDef           *g_yyFileDef;
static FileDef           *g_inputFileDef;
static int                g_ifcount    = 0;
static QStrList          *g_pathList = 0;  
static QStack<FileState>  g_includeStack;
static QDict<int>        *g_argDict;
static int                g_defArgs = -1;
static QCString           g_defName;
static QCString           g_defText;
static QCString           g_defLitText;
static QCString           g_defArgsStr;
static QCString           g_defExtraSpacing;
static bool               g_defVarArgs;
static int                g_level;
static int                g_lastCContext;
static int                g_lastCPPContext;
static QArray<int>        g_levelGuard;
static BufStr            *g_inputBuf;
static int                g_inputBufPos;
static BufStr            *g_outputBuf;
static int                g_roundCount;
static bool               g_quoteArg;
static DefineDict        *g_expandedDict;
static int                g_findDefArgContext;
static bool               g_expectGuard;
static QCString           g_guardName;
static QCString           g_lastGuardName;
static QCString           g_incName;
static QCString           g_guardExpr;
static int                g_curlyCount;
static bool               g_nospaces; // add extra spaces during macro expansion

static bool               g_macroExpansion; // from the configuration
static bool               g_expandOnlyPredef; // from the configuration
static int                g_commentCount;
static bool               g_insideComment;
static bool               g_isImported;
static QCString           g_blockName;
static int                g_condCtx;
static bool               g_skip;
static QStack<CondCtx>    g_condStack;
static bool               g_insideCS; // C# has simpler preprocessor
static bool               g_isSource;

static bool               g_lexInit = FALSE;
static int                g_fenceSize = 0;
static bool               g_ccomment;

//DefineDict* getGlobalDefineDict() 
//{
//  return g_globalDefineDict;
//}

static void setFileName(const char *name)
{
  bool ambig;
  QFileInfo fi(name);
  g_yyFileName=fi.absFilePath().utf8();
  g_yyFileDef=findFileDef(Doxygen::inputNameDict,g_yyFileName,ambig);
  if (g_yyFileDef==0) // if this is not an input file check if it is an
                      // include file
  {
    g_yyFileDef=findFileDef(Doxygen::includeNameDict,g_yyFileName,ambig);
  }
  //printf("setFileName(%s) g_yyFileName=%s g_yyFileDef=%p\n",
  //    name,g_yyFileName.data(),g_yyFileDef);
  if (g_yyFileDef && g_yyFileDef->isReference()) g_yyFileDef=0;
  g_insideCS = getLanguageFromFileName(g_yyFileName)==SrcLangExt_CSharp;
  g_isSource = guessSection(g_yyFileName);
}

static void incrLevel()
{
  g_level++;
  g_levelGuard.resize(g_level);
  g_levelGuard[g_level-1]=FALSE;
  //printf("%s line %d: incrLevel %d\n",g_yyFileName.data(),g_yyLineNr,g_level);
}

static void decrLevel()
{
  //printf("%s line %d: decrLevel %d\n",g_yyFileName.data(),g_yyLineNr,g_level);
  if (g_level > 0)
  {
    g_level--;
    g_levelGuard.resize(g_level);
  }
  else
  {
    warn(g_yyFileName,g_yyLineNr,"More #endif's than #if's found.\n");
  }
}

static bool otherCaseDone()
{
  if (g_level==0)
  {
    warn(g_yyFileName,g_yyLineNr,"Found an #else without a preceding #if.\n");
    return TRUE;
  }
  else
  {
    return g_levelGuard[g_level-1];
  }
}

static void setCaseDone(bool value)
{
  g_levelGuard[g_level-1]=value;
}

static QDict<void> g_allIncludes(10009);

static FileState *checkAndOpenFile(const QCString &fileName,bool &alreadyIncluded)
{
  alreadyIncluded = FALSE;
  FileState *fs = 0;
  //printf("checkAndOpenFile(%s)\n",fileName.data());
  QFileInfo fi(fileName);
  if (fi.exists() && fi.isFile())
  {
    static QStrList &exclPatterns = Config_getList(EXCLUDE_PATTERNS);
    if (patternMatch(fi,&exclPatterns)) return 0;

    QCString absName = fi.absFilePath().utf8();

    // global guard
    if (g_curlyCount==0) // not #include inside { ... }
    {
      if (g_allIncludes.find(absName)!=0)
      {
        alreadyIncluded = TRUE;
        //printf("  already included 1\n");
        return 0; // already done
      }
      g_allIncludes.insert(absName,(void *)0x8);
    }
    // check include stack for absName

    QStack<FileState> tmpStack;
    g_includeStack.setAutoDelete(FALSE);
    while ((fs=g_includeStack.pop()))
    {
      if (fs->fileName==absName) alreadyIncluded=TRUE;
      tmpStack.push(fs);
    }
    while ((fs=tmpStack.pop()))
    {
      g_includeStack.push(fs);
    }
    g_includeStack.setAutoDelete(TRUE);

    if (alreadyIncluded)
    {
      //printf("  already included 2\n");
      return 0;
    }
    //printf("#include %s\n",absName.data());

    fs = new FileState(fi.size()+4096);
    alreadyIncluded = FALSE;
    if (!readInputFile(absName,fs->fileBuf))
    { // error
      //printf("  error reading\n");
      delete fs;
      fs=0;
    }
    else
    {
      fs->oldFileBuf    = g_inputBuf;
      fs->oldFileBufPos = g_inputBufPos;
    }
  }
  return fs;
}

static FileState *findFile(const char *fileName,bool localInclude,bool &alreadyIncluded)
{
  //printf("** findFile(%s,%d) g_yyFileName=%s\n",fileName,localInclude,g_yyFileName.data());
  if (portable_isAbsolutePath(fileName))
  {
    FileState *fs = checkAndOpenFile(fileName,alreadyIncluded);
    if (fs)
    {
      setFileName(fileName);
      g_yyLineNr=1;
      return fs;
    }
    else if (alreadyIncluded)
    {
      return 0;
    }
  }
  if (localInclude && !g_yyFileName.isEmpty())
  {
    QFileInfo fi(g_yyFileName);
    if (fi.exists())
    {
      QCString absName = QCString(fi.dirPath(TRUE).data())+"/"+fileName;
      FileState *fs = checkAndOpenFile(absName,alreadyIncluded);
      if (fs)
      {
	setFileName(absName);
	g_yyLineNr=1;
	return fs;
      }
      else if (alreadyIncluded)
      {
	return 0;
      }
    }
  }
  if (g_pathList==0) 
  {
    return 0;
  }
  char *s=g_pathList->first();
  while (s)
  {
    QCString absName = (QCString)s+"/"+fileName;
    //printf("  Looking for %s in %s\n",fileName,s);
    FileState *fs = checkAndOpenFile(absName,alreadyIncluded);
    if (fs)
    {
      setFileName(absName);
      g_yyLineNr=1;
      //printf("  -> found it\n");
      return fs;
    }
    else if (alreadyIncluded)
    {
      return 0;
    }

    s=g_pathList->next();
  } 
  return 0;
}

static QCString extractTrailingComment(const char *s)
{
  if (s==0) return "";
  int i=strlen(s)-1;
  while (i>=0)
  {
    char c=s[i];
    switch (c)
    {
      case '/':
	{
	  i--;
	  if (i>=0 && s[i]=='*') // end of a comment block
	  {
	    i--;
	    while (i>0 && !(s[i-1]=='/' && s[i]=='*')) i--;
	    if (i==0) 
	    {
	      i++;
	    }
	    // only /*!< or /**< are treated as a comment for the macro name,
	    // otherwise the comment is treated as part of the macro definition
	    return ((s[i+1]=='*' || s[i+1]=='!') && s[i+2]=='<') ? &s[i-1] : ""; 
	  }
	  else
	  {
	    return "";
	  }
	} 
	break;
	// whitespace or line-continuation
      case ' ':
      case '\t': 
      case '\r':
      case '\n':
      case '\\':
	break;
      default:
	return "";
    }
    i--;
  }
  return "";
}

static int getNextChar(const QCString &expr,QCString *rest,uint &pos);
static int getCurrentChar(const QCString &expr,QCString *rest,uint pos);
static void unputChar(const QCString &expr,QCString *rest,uint &pos,char c);
static void expandExpression(QCString &expr,QCString *rest,int pos);

static QCString stringize(const QCString &s)
{
  QCString result;
  uint i=0;
  bool inString=FALSE;
  bool inChar=FALSE;
  char c,pc;
  while (i<s.length())
  {
    if (!inString && !inChar)
    {
      while (i<s.length() && !inString && !inChar)
      {
	c=s.at(i++);
	if (c=='"')
	{
	  result+="\\\"";
	  inString=TRUE;
	}
	else if (c=='\'')
	{
	  result+=c;
	  inChar=TRUE;
	}
	else
	{
	  result+=c;
	}
      }
    }
    else if (inChar)
    {
      while (i<s.length() && inChar)
      {
	c=s.at(i++);
	if (c=='\'')
	{
	  result+='\'';
	  inChar=FALSE;
	}
	else if (c=='\\')
	{
	  result+="\\\\";
	}
	else
	{
	  result+=c;
	}
      }
    }
    else
    {
      pc=0;
      while (i<s.length() && inString)
      {
	char c=s.at(i++);
	if (c=='"') 
	{
	  result+="\\\"";
	  inString= pc=='\\';
	}
	else if (c=='\\')
	  result+="\\\\";
	else
	  result+=c;
	pc=c;
      }
    }
  }
  //printf("stringize `%s'->`%s'\n",s.data(),result.data());
  return result;
}

/*! Execute all ## operators in expr. 
 * If the macro name before or after the operator contains a no-rescan 
 * marker (@-) then this is removed (before the concatenated macro name
 * may be expanded again.
 */
static void processConcatOperators(QCString &expr)
{
  //printf("processConcatOperators: in=`%s'\n",expr.data());
  QRegExp r("[ \\t\\n]*##[ \\t\\n]*"); 
  int l,n,i=0;
  if (expr.isEmpty()) return;
  while ((n=r.match(expr,i,&l))!=-1)
  {
    //printf("Match: `%s'\n",expr.data()+i);
    if (n+l+1<(int)expr.length() && expr.at(n+l)=='@' && expr.at(n+l+1)=='-')
    {
      // remove no-rescan marker after ID
      l+=2;
    }
    //printf("found `%s'\n",expr.mid(n,l).data());
    // remove the ## operator and the surrounding whitespace
    expr=expr.left(n)+expr.right(expr.length()-n-l);
    int k=n-1;
    while (k>=0 && isId(expr.at(k))) k--; 
    if (k>0 && expr.at(k)=='-' && expr.at(k-1)=='@')
    {
      // remove no-rescan marker before ID
      expr=expr.left(k-1)+expr.right(expr.length()-k-1);
      n-=2;
    }
    i=n;
  }
  //printf("processConcatOperators: out=`%s'\n",expr.data());
}

static void yyunput (int c,char *buf_ptr  );
static void returnCharToStream(char c)
{
  unput(c);
}

static inline void addTillEndOfString(const QCString &expr,QCString *rest,
                                       uint &pos,char term,QCString &arg)
{
  int cc;
  while ((cc=getNextChar(expr,rest,pos))!=EOF && cc!=0)
  {
    if (cc=='\\') arg+=(char)cc,cc=getNextChar(expr,rest,pos);
    else if (cc==term) return;
    arg+=(char)cc;
  }
}

/*! replaces the function macro \a def whose argument list starts at
 * \a pos in expression \a expr. 
 * Notice that this routine may scan beyond the \a expr string if needed.
 * In that case the characters will be read from the input file.
 * The replacement string will be returned in \a result and the 
 * length of the (unexpanded) argument list is stored in \a len.
 */ 
static bool replaceFunctionMacro(const QCString &expr,QCString *rest,int pos,int &len,const Define *def,QCString &result)
{
  //printf("replaceFunctionMacro(expr=%s,rest=%s,pos=%d,def=%s) level=%d\n",expr.data(),rest ? rest->data() : 0,pos,def->name.data(),g_level);
  uint j=pos;
  len=0;
  result.resize(0);
  int cc;
  while ((cc=getCurrentChar(expr,rest,j))!=EOF && isspace(cc)) 
  { 
    len++; 
    getNextChar(expr,rest,j); 
  }
  if (cc!='(') 
  { 
    unputChar(expr,rest,j,' '); 
    return FALSE; 
  }
  getNextChar(expr,rest,j); // eat the `(' character

  QDict<QCString> argTable;  // list of arguments
  argTable.setAutoDelete(TRUE);
  QCString arg;
  int argCount=0;
  bool done=FALSE;
  
  // PHASE 1: read the macro arguments
  if (def->nargs==0)
  {
    while ((cc=getNextChar(expr,rest,j))!=EOF && cc!=0)
    {
      char c = (char)cc;
      if (c==')') break;
    }
  }
  else
  {
    while (!done && (argCount<def->nargs || def->varArgs) && 
	((cc=getNextChar(expr,rest,j))!=EOF && cc!=0)
	  )
    {
      char c=(char)cc;
      if (c=='(') // argument is a function => search for matching )
      {
	int level=1;
	arg+=c;
	//char term='\0';
	while ((cc=getNextChar(expr,rest,j))!=EOF && cc!=0)
	{
	  char c=(char)cc;
	  //printf("processing %c: term=%c (%d)\n",c,term,term);
	  if (c=='\'' || c=='\"') // skip ('s and )'s inside strings
	  {
	    arg+=c;
	    addTillEndOfString(expr,rest,j,c,arg);
	  }
	  if (c==')')
	  {
	    level--;
	    arg+=c;
	    if (level==0) break;
	  }
	  else if (c=='(')
	  {
	    level++;
	    arg+=c;
	  }
	  else
	    arg+=c;
	}
      }
      else if (c==')' || c==',') // last or next argument found
      {
	if (c==',' && argCount==def->nargs-1 && def->varArgs)
	{
	  arg=arg.stripWhiteSpace();
	  arg+=',';
	}
	else
	{
	  QCString argKey;
	  argKey.sprintf("@%d",argCount++); // key name
	  arg=arg.stripWhiteSpace();
	  // add argument to the lookup table
	  argTable.insert(argKey, new QCString(arg));
	  arg.resize(0);
	  if (c==')') // end of the argument list
	  {
	    done=TRUE;
	  }
	}
      } 
      else if (c=='\"') // append literal strings
      {
	arg+=c; 
	bool found=FALSE;
	while (!found && (cc=getNextChar(expr,rest,j))!=EOF && cc!=0)
	{
	  found = cc=='"';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(expr,rest,j))==EOF || cc==0) break;
	  }
	  c=(char)cc;	  
	  arg+=c;
	}
      }
      else if (c=='\'') // append literal characters
      {
	arg+=c;
	bool found=FALSE;
	while (!found && (cc=getNextChar(expr,rest,j))!=EOF && cc!=0)
	{
	  found = cc=='\'';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(expr,rest,j))==EOF || cc==0) break;
	  }
	  c=(char)cc;
	  arg+=c;
	}
      }	    
      else // append other characters
      {
	arg+=c;
      }
    }
  }

  // PHASE 2: apply the macro function
  if (argCount==def->nargs || // same number of arguments
      (argCount>=def->nargs-1 && def->varArgs)) // variadic macro with at least as many
                                                // params as the non-variadic part (see bug731985)
  {
    uint k=0;
    // substitution of all formal arguments
    QCString resExpr;
    const QCString d=def->definition.stripWhiteSpace();
    //printf("Macro definition: %s\n",d.data());
    bool inString=FALSE;
    while (k<d.length())
    {
      if (d.at(k)=='@') // maybe a marker, otherwise an escaped @
      {
	if (d.at(k+1)=='@') // escaped @ => copy it (is unescaped later)
	{
	  k+=2;
	  resExpr+="@@"; // we unescape these later
	}
	else if (d.at(k+1)=='-') // no-rescan marker
	{
	  k+=2;
	  resExpr+="@-";
	}
	else // argument marker => read the argument number
	{
	  QCString key="@";
	  QCString *subst=0;
	  bool hash=FALSE;
	  int l=k-1;
	  // search for ## backward
	  if (l>=0 && d.at(l)=='"') l--;
	  while (l>=0 && d.at(l)==' ') l--;
	  if (l>0 && d.at(l)=='#' && d.at(l-1)=='#') hash=TRUE;
	  k++;
	  // scan the number
	  while (k<d.length() && d.at(k)>='0' && d.at(k)<='9') key+=d.at(k++);
	  if (!hash) 
	  {
	    // search for ## forward
	    l=k;
	    if (l<(int)d.length() && d.at(l)=='"') l++;
	    while (l<(int)d.length() && d.at(l)==' ') l++;
	    if (l<(int)d.length()-1 && d.at(l)=='#' && d.at(l+1)=='#') hash=TRUE;
	  }
	  //printf("request key %s result %s\n",key.data(),argTable[key]->data());
	  if (key.length()>1 && (subst=argTable[key])) 
	  {
	    QCString substArg=*subst;
	    //printf("substArg=`%s'\n",substArg.data());
	    // only if no ## operator is before or after the argument
	    // marker we do macro expansion.
	    if (!hash) expandExpression(substArg,0,0);
	    if (inString)
	    {
	      //printf("`%s'=stringize(`%s')\n",stringize(*subst).data(),subst->data());

	      // if the marker is inside a string (because a # was put 
	      // before the macro name) we must escape " and \ characters
	      resExpr+=stringize(substArg);
	    }
	    else
	    {
	      if (hash && substArg.isEmpty())
	      {
		resExpr+="@E"; // empty argument will be remove later on
	      }
	      else if (g_nospaces)
	      {
	        resExpr+=substArg;
	      }
	      else
	      {
	        resExpr+=" "+substArg+" ";
	      }
	    }
	  }
	}
      }
      else // no marker, just copy
      {
	if (!inString && d.at(k)=='\"') 
	{
	  inString=TRUE; // entering a literal string
	}
	else if (inString && d.at(k)=='\"' && (d.at(k-1)!='\\' || d.at(k-2)=='\\'))
	{
	  inString=FALSE; // leaving a literal string
	}
	resExpr+=d.at(k++);
      }
    }
    len=j-pos;
    result=resExpr;
    //printf("result after substitution `%s' expr=`%s'\n",
    //       result.data(),expr.mid(pos,len).data());
    return TRUE;
  }
  return FALSE;
}


/*! returns the next identifier in string \a expr by starting at position \a p.
 * The position of the identifier is returned (or -1 if nothing is found)
 * and \a l is its length. Any quoted strings are skipping during the search.
 */
static int getNextId(const QCString &expr,int p,int *l)
{
  int n;
  while (p<(int)expr.length())
  {
    char c=expr.at(p++);
    if (isdigit(c)) // skip number
    {
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
    }
    else if (isalpha(c) || c=='_') // read id
    {
      n=p-1;
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
      *l=p-n;
      return n; 
    }
    else if (c=='"') // skip string
    {
      char ppc=0,pc=c;
      if (p<(int)expr.length()) c=expr.at(p);
      while (p<(int)expr.length() && (c!='"' || (pc=='\\' && ppc!='\\'))) 
	// continue as long as no " is found, but ignoring \", but not \\"
      {
	ppc=pc;
	pc=c;
	c=expr.at(p);
	p++;
      }
      if (p<(int)expr.length()) ++p; // skip closing quote
    }
    else if (c=='/') // skip C Comment
    {
      //printf("Found C comment at p=%d\n",p);
      char pc=c;
      if (p<(int)expr.length()) 
      {
	c=expr.at(p);
        if (c=='*')  // Start of C comment
        { 
	  p++;
  	  while (p<(int)expr.length() && !(pc=='*' && c=='/'))
	  {
	    pc=c;
	    c=expr.at(p++);
	  }
        }
      }
      //printf("Found end of C comment at p=%d\n",p);
    }
  }
  return -1;
}

/*! preforms recursive macro expansion on the string \a expr
 *  starting at position \a pos.
 *  May read additional characters from the input while re-scanning!
 *  If \a expandAll is \c TRUE then all macros in the expression are
 *  expanded, otherwise only the first is expanded.
 */
static void expandExpression(QCString &expr,QCString *rest,int pos)
{
  //printf("expandExpression(%s,%s)\n",expr.data(),rest ? rest->data() : 0);
  QCString macroName;
  QCString expMacro;
  bool definedTest=FALSE;
  int i=pos,l,p,len;
  while ((p=getNextId(expr,i,&l))!=-1) // search for an macro name
  {
    bool replaced=FALSE;
    macroName=expr.mid(p,l);
    //printf("macroName=%s\n",macroName.data());
    if (p<2 || !(expr.at(p-2)=='@' && expr.at(p-1)=='-')) // no-rescan marker?
    {
      if (g_expandedDict->find(macroName)==0) // expand macro
      {
	Define *def=DefineManager::instance().isDefined(macroName);
	if (definedTest) // macro name was found after defined 
	{
	  if (def) expMacro = " 1 "; else expMacro = " 0 ";
	  replaced=TRUE;
	  len=l;
	  definedTest=FALSE;
	}
	else if (def && def->nargs==-1) // simple macro
	{
	  // substitute the definition of the macro
	  //printf("macro `%s'->`%s'\n",macroName.data(),def->definition.data());
	  if (g_nospaces)
	  {
	    expMacro=def->definition.stripWhiteSpace();
	  }
	  else
	  {
	    expMacro=" "+def->definition.stripWhiteSpace()+" ";
	  }
	  //expMacro=def->definition.stripWhiteSpace();
	  replaced=TRUE;
	  len=l;
	  //printf("simple macro expansion=`%s'->`%s'\n",macroName.data(),expMacro.data());
	}
	else if (def && def->nargs>=0) // function macro
	{
	  replaced=replaceFunctionMacro(expr,rest,p+l,len,def,expMacro);
	  len+=l;
	}
        else if (macroName=="defined")
        {
  	  //printf("found defined inside macro definition '%s'\n",expr.right(expr.length()-p).data());
	  definedTest=TRUE;
        }

	if (replaced) // expand the macro and rescan the expression
	{
	    
	  //printf("replacing `%s'->`%s'\n",expr.mid(p,len).data(),expMacro.data());
	  QCString resultExpr=expMacro;
	  QCString restExpr=expr.right(expr.length()-len-p);
	  processConcatOperators(resultExpr);
	  if (def && !def->nonRecursive)
	  {
	    g_expandedDict->insert(macroName,def);
	    expandExpression(resultExpr,&restExpr,0);
	    g_expandedDict->remove(macroName);
	  }
	  expr=expr.left(p)+resultExpr+restExpr;
	  i=p;
	  //printf("new expression: %s\n",expr.data());
	}
	else // move to the next macro name
	{
	  //printf("moving to the next macro old=%d new=%d\n",i,p+l);
	  i=p+l;
	}
      }
      else // move to the next macro name
      {
	expr=expr.left(p)+"@-"+expr.right(expr.length()-p);
	//printf("macro already expanded, moving to the next macro expr=%s\n",expr.data());
	i=p+l+2;
	//i=p+l;
      }
    }
    else // no re-scan marker found, skip the macro name
    {
      //printf("skipping marked macro\n");
      i=p+l;
    }
  }
}

/*! replaces all occurrences of @@@@ in \a s by @@
 *  and removes all occurrences of @@E.
 *  All identifiers found are replaced by 0L
 */
QCString removeIdsAndMarkers(const char *s)
{
  //printf("removeIdsAndMarkers(%s)\n",s);
  const char *p=s;
  char c;
  bool inNum=FALSE;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      if (c=='@') // replace @@ with @ and remove @E
      {
	if (*(p+1)=='@')
	{
	  result+=c; 
	}
	else if (*(p+1)=='E')
	{
	  // skip
	}
	p+=2;
      }
      else if (isdigit(c)) // number
      {
	result+=c;
	p++;
        inNum=TRUE;	
      }
      else if (c=='d' && !inNum) // identifier starting with a `d'
      {
	if (qstrncmp(p,"defined ",8)==0 || qstrncmp(p,"defined(",8)==0) 
	           // defined keyword
	{
	  p+=7; // skip defined
	}
	else
	{
	  result+="0L";
	  p++;
	  while ((c=*p) && isId(c)) p++;
	}
      }
      else if ((isalpha(c) || c=='_') && !inNum) // replace identifier with 0L
      {
	result+="0L";
	p++;
	while ((c=*p) && isId(c)) p++;
	if (*p=='(') // undefined function macro
	{
	  p++;
	  int count=1;
	  while ((c=*p++))
	  {
	    if (c=='(') count++;
	    else if (c==')')
	    {
	      count--;
	      if (count==0) break;
	    }
	    else if (c=='/')
	    {
	      char pc=c;
	      c=*++p;
	      if (c=='*') // start of C comment
	      {
		while (*p && !(pc=='*' && c=='/')) // search end of comment
		{
		  pc=c;
		  c=*++p;
		}
		p++;
	      }
	    }
	  }
	}
      }
      else if (c=='/') // skip C comments
      {
	char pc=c;
	c=*++p;
	if (c=='*') // start of C comment
	{ 
	  while (*p && !(pc=='*' && c=='/')) // search end of comment
	  {
	    pc=c;
	    c=*++p;
	  }
	  p++;
	}
	else // oops, not comment but division
	{
	  result+=pc;
	  goto nextChar;
	}
      }
      else 
      {
nextChar:
	result+=c;
	char lc=tolower(c);
	if (!isId(lc) && lc!='.' /*&& lc!='-' && lc!='+'*/) inNum=FALSE;
	p++;
      }
    }
  }
  //printf("removeIdsAndMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! replaces all occurrences of @@ in \a s by @
 *  \par assumption: 
 *   \a s only contains pairs of @@'s
 */
QCString removeMarkers(const char *s)
{
  const char *p=s;
  char c;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      switch(c)
      {
	case '@': // replace @@ with @
	  {
	    if (*(p+1)=='@')
	    {
	      result+=c; 
	    }
	    p+=2;
	  }
	  break;
	case '/': // skip C comments
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    if (c=='*') // start of C comment
	    { 
	      while (*p && !(pc=='*' && c=='/')) // search end of comment
	      {
		if (*p=='@' && *(p+1)=='@') 
		  result+=c,p++;
		else 
		  result+=c;
		pc=c;
		c=*++p;
	      }
	      if (*p) result+=c,p++;
	    }
	  }
	  break;
	case '"': // skip string literals
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    while (*p && (c!='"' || pc=='\\')) // no end quote
	    {
	      result+=c;
	      c=*++p;
	    }
	    if (*p) result+=c,p++; 
	  }
	  break;
	case '\'': // skip char literals
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    while (*p && (c!='\'' || pc=='\\')) // no end quote
	    {
	      result+=c;
	      c=*++p;
	    }
	    if (*p) result+=c,p++; 
	  }
	  break;
	default:
	  {
	    result+=c;
	    p++;
	  }
	  break;
      }
    }
  }
  //printf("RemoveMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! compute the value of the expression in string \a expr.
 *  If needed the function may read additional characters from the input.
 */

bool computeExpression(const QCString &expr)
{
  QCString e=expr;
  expandExpression(e,0,0);
  //printf("after expansion `%s'\n",e.data());
  e = removeIdsAndMarkers(e);
  if (e.isEmpty()) return FALSE;
  //printf("parsing `%s'\n",e.data());
  return parseconstexp(g_yyFileName,g_yyLineNr,e);
}

/*! expands the macro definition in \a name
 *  If needed the function may read additional characters from the input
 */

QCString expandMacro(const QCString &name)
{
  QCString n=name;
  expandExpression(n,0,0);
  n=removeMarkers(n);
  //printf("expandMacro `%s'->`%s'\n",name.data(),n.data());
  return n;
}

Define *newDefine()
{
  Define *def=new Define;
  def->name       = g_defName;
  def->definition = g_defText.stripWhiteSpace();
  def->nargs      = g_defArgs;
  def->fileName   = g_yyFileName; 
  def->fileDef    = g_yyFileDef;
  def->lineNr     = g_yyLineNr-g_yyMLines;
  def->columnNr   = g_yyColNr;
  def->varArgs    = g_defVarArgs;
  //printf("newDefine: %s %s file: %s\n",def->name.data(),def->definition.data(),
  //    def->fileDef ? def->fileDef->name().data() : def->fileName.data());
  //printf("newDefine: `%s'->`%s'\n",def->name.data(),def->definition.data());
  if (!def->name.isEmpty() && Doxygen::expandAsDefinedDict[def->name])
  {
    def->isPredefined=TRUE;
  }
  return def;
}

void addDefine()
{
  if (g_skip) return; // do not add this define as it is inside a 
                      // conditional section (cond command) that is disabled.
  if (!Doxygen::gatherDefines) return;

  //printf("addDefine %s %s\n",g_defName.data(),g_defArgsStr.data());
  //ArgumentList *al = new ArgumentList;
  //stringToArgumentList(g_defArgsStr,al);
  MemberDef *md=new MemberDef(
      g_yyFileName,g_yyLineNr-g_yyMLines,g_yyColNr,
      "#define",g_defName,g_defArgsStr,0,
      Public,Normal,FALSE,Member,MemberType_Define,0,0);
  if (!g_defArgsStr.isEmpty())
  {
    ArgumentList *argList = new ArgumentList;
    //printf("addDefine() g_defName=`%s' g_defArgsStr=`%s'\n",g_defName.data(),g_defArgsStr.data());
    stringToArgumentList(g_defArgsStr,argList);
    md->setArgumentList(argList);
  }
  //printf("Setting initializer for `%s' to `%s'\n",g_defName.data(),g_defText.data());
  int l=g_defLitText.find('\n');
  if (l>0 && g_defLitText.left(l).stripWhiteSpace()=="\\")
  {
    // strip first line if it only contains a slash
    g_defLitText = g_defLitText.right(g_defLitText.length()-l-1);
  }
  else if (l>0)
  {
    // align the items on the first line with the items on the second line
    int k=l+1;
    const char *p=g_defLitText.data()+k;
    char c;
    while ((c=*p++) && (c==' ' || c=='\t')) k++;
    g_defLitText=g_defLitText.mid(l+1,k-l-1)+g_defLitText.stripWhiteSpace();
  }
  md->setInitializer(g_defLitText.stripWhiteSpace());

  //printf("pre.l: md->setFileDef(%p)\n",g_inputFileDef);
  md->setFileDef(g_inputFileDef);
  md->setDefinition("#define "+g_defName);

  MemberName *mn=Doxygen::functionNameSDict->find(g_defName);
  if (mn==0)
  {
    mn = new MemberName(g_defName);
    Doxygen::functionNameSDict->append(g_defName,mn);
  }
  mn->append(md);
  if (g_yyFileDef) 
  {
    g_yyFileDef->insertMember(md);
  }

  //Define *d;
  //if ((d=defineDict[g_defName])==0) defineDict.insert(g_defName,newDefine()); 
}

static inline void outputChar(char c)
{
  if (g_includeStack.isEmpty() || g_curlyCount>0) g_outputBuf->addChar(c);
}

static inline void outputArray(const char *a,int len)
{
  if (g_includeStack.isEmpty() || g_curlyCount>0) g_outputBuf->addArray(a,len);
}

static void readIncludeFile(const QCString &inc)
{
  static bool searchIncludes = Config_getBool(SEARCH_INCLUDES);
  uint i=0;

  // find the start of the include file name
  while (i<inc.length() &&
         (inc.at(i)==' ' || inc.at(i)=='"' || inc.at(i)=='<')
        ) i++;
  uint s=i;

  // was it a local include?
  bool localInclude = s>0 && inc.at(s-1)=='"';

  // find the end of the include file name
  while (i<inc.length() && inc.at(i)!='"' && inc.at(i)!='>') i++;

  if (s<inc.length() && i>s) // valid include file name found
  {
    // extract include path+name
    QCString incFileName=inc.mid(s,i-s).stripWhiteSpace();

    QCString dosExt = incFileName.right(4);
    if (dosExt==".exe" || dosExt==".dll" || dosExt==".tlb")
    {
      // skip imported binary files (e.g. M$ type libraries)
      return;
    }

    QCString oldFileName = g_yyFileName;
    FileDef *oldFileDef  = g_yyFileDef;
    int oldLineNr        = g_yyLineNr;
    //printf("Searching for `%s'\n",incFileName.data());

    // absIncFileName avoids difficulties for incFileName starting with "../" (bug 641336)
    QCString absIncFileName = incFileName;
    {
      QFileInfo fi(g_yyFileName);
      if (fi.exists())
      {
	QCString absName = QCString(fi.dirPath(TRUE).data())+"/"+incFileName;
        QFileInfo fi2(absName);
        if (fi2.exists())
        {
	  absIncFileName=fi2.absFilePath().utf8();
	}
	else if (searchIncludes) // search in INCLUDE_PATH as well
	{
	  QStrList &includePath = Config_getList(INCLUDE_PATH);
	  char *s=includePath.first();
	  while (s)
	  {
	    QFileInfo fi(s);
	    if (fi.exists() && fi.isDir())
	    {
	      QCString absName = QCString(fi.absFilePath().utf8())+"/"+incFileName;
	      //printf("trying absName=%s\n",absName.data());
	      QFileInfo fi2(absName);
	      if (fi2.exists())
	      {
		absIncFileName=fi2.absFilePath().utf8();
		break;
	      }
	      //printf( "absIncFileName = %s\n", absIncFileName.data() );
	    }
	    s=includePath.next();
	  }
	}
	//printf( "absIncFileName = %s\n", absIncFileName.data() );
      }
    }
    DefineManager::instance().addInclude(g_yyFileName,absIncFileName);
    DefineManager::instance().addFileToContext(absIncFileName);

    // findFile will overwrite g_yyFileDef if found
    FileState *fs;
    bool alreadyIncluded = FALSE;
    //printf("calling findFile(%s)\n",incFileName.data());
    if ((fs=findFile(incFileName,localInclude,alreadyIncluded))) // see if the include file can be found
    {
      //printf("Found include file!\n");
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
        for (i=0;i<g_includeStack.count();i++) 
        {
          Debug::print(Debug::Preprocessor,0,"  ");
        }
        //msg("#include %s: parsing...\n",incFileName.data());
      }
      if (oldFileDef)
      {
        // add include dependency to the file in which the #include was found
	bool ambig;
	// change to absolute name for bug 641336 
        FileDef *incFd = findFileDef(Doxygen::inputNameDict,absIncFileName,ambig);
        oldFileDef->addIncludeDependency(ambig ? 0 : incFd,incFileName,localInclude,g_isImported,FALSE);
        // add included by dependency
        if (g_yyFileDef)
        {
          //printf("Adding include dependency %s->%s\n",oldFileDef->name().data(),incFileName.data());
          g_yyFileDef->addIncludedByDependency(oldFileDef,oldFileDef->docName(),localInclude,g_isImported);
        }
      }
      else if (g_inputFileDef)
      {
        g_inputFileDef->addIncludeDependency(0,absIncFileName,localInclude,g_isImported,TRUE);
      }
      fs->bufState = YY_CURRENT_BUFFER;
      fs->lineNr   = oldLineNr;
      fs->fileName = oldFileName;
      // push the state on the stack
      g_includeStack.push(fs);
      // set the scanner to the include file

      // Deal with file changes due to 
      // #include's within { .. } blocks
      QCString lineStr(g_yyFileName.length()+20);
      lineStr.sprintf("# 1 \"%s\" 1\n",g_yyFileName.data());
      outputArray(lineStr.data(),lineStr.length());

      DBG_CTX((stderr,"Switching to include file %s\n",incFileName.data()));
      g_expectGuard=TRUE;
      g_inputBuf   = &fs->fileBuf;
      g_inputBufPos=0;
      preYY_switch_to_buffer(preYY_create_buffer(0,YY_BUF_SIZE));
    }
    else
    {
      //printf("  calling findFile(%s) alreadyInc=%d\n",incFileName.data(),alreadyIncluded);
      if (oldFileDef)
      {
	bool ambig;
	//QCString absPath = incFileName;
	//if (QDir::isRelativePath(incFileName))
	//{
	//  absPath = QDir::cleanDirPath(oldFileDef->getPath()+"/"+incFileName);
	//  //printf("%s + %s -> resolved path %s\n",oldFileDef->getPath().data(),incFileName.data(),absPath.data());
	//}

	// change to absolute name for bug 641336 
	FileDef *fd = findFileDef(Doxygen::inputNameDict,absIncFileName,ambig);
	//printf("%s::findFileDef(%s)=%p\n",oldFileDef->name().data(),incFileName.data(),fd);
	// add include dependency to the file in which the #include was found
	oldFileDef->addIncludeDependency(ambig ? 0 : fd,incFileName,localInclude,g_isImported,FALSE);
	// add included by dependency
        if (fd)
        {
          //printf("Adding include dependency (2) %s->%s ambig=%d\n",oldFileDef->name().data(),fd->name().data(),ambig);
          fd->addIncludedByDependency(oldFileDef,oldFileDef->docName(),localInclude,g_isImported);
        }
      }
      else if (g_inputFileDef)
      {
        g_inputFileDef->addIncludeDependency(0,absIncFileName,localInclude,g_isImported,TRUE);
      }
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
	if (alreadyIncluded)
	{
          Debug::print(Debug::Preprocessor,0,"#include %s: already included! skipping...\n",qPrint(incFileName));
	}
	else
	{
          Debug::print(Debug::Preprocessor,0,"#include %s: not found! skipping...\n",qPrint(incFileName));
	}
        //printf("error: include file %s not found\n",preYYtext);
      }
      if (g_curlyCount>0 && !alreadyIncluded) // failed to find #include inside { ... }
      {
	warn(g_yyFileName,g_yyLineNr,"include file %s not found, perhaps you forgot to add its directory to INCLUDE_PATH?",incFileName.data());
      }
    }
  }
}

/* ----------------------------------------------------------------- */

static void startCondSection(const char *sectId)
{
  //printf("startCondSection: skip=%d stack=%d\n",g_skip,g_condStack.count());
  CondParser prs;
  bool expResult = prs.parse(g_yyFileName,g_yyLineNr,sectId);
  g_condStack.push(new CondCtx(g_yyLineNr,sectId,g_skip));
  if (!expResult)
  {
    g_skip=TRUE;
  }
  //printf("  expResult=%d skip=%d\n",expResult,g_skip);
}

static void endCondSection()
{
  if (g_condStack.isEmpty())
  {
    g_skip=FALSE;
  }
  else
  {
    CondCtx *ctx = g_condStack.pop();
    g_skip=ctx->skip;
    delete ctx;
  }
  //printf("endCondSection: skip=%d stack=%d\n",g_skip,g_condStack.count());
}

static void forceEndCondSection()
{
  while (!g_condStack.isEmpty())
  {
    delete g_condStack.pop();
  }
  g_skip=FALSE;
}

static QCString escapeAt(const char *text)
{
  QCString result;
  if (text)
  {
    char c;
    const char *p=text;
    while ((c=*p++))
    {
      if (c=='@') result+="@@"; else result+=c;
    }
  }
  return result;
}

static char resolveTrigraph(char c)
{
  switch (c)
  {
    case '=': return '#';
    case '/': return '\\';
    case '\'': return '^';
    case '(': return '[';
    case ')': return ']';
    case '!': return '|';
    case '<': return '{';
    case '>': return '}';
    case '-': return '~';
  }
  return '?';
}

/* ----------------------------------------------------------------- */

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int bytesInBuf = g_inputBuf->curPos()-g_inputBufPos;
  int bytesToCopy = QMIN(max_size,bytesInBuf);
  memcpy(buf,g_inputBuf->data()+g_inputBufPos,bytesToCopy);
  g_inputBufPos+=bytesToCopy;
  return bytesToCopy;
}

/* ----------------------------------------------------------------- */




































#line 4278 "/home/agustin/git/serverapp/doxygen/generated_src/pre.cpp"

#define INITIAL 0
#define Start 1
#define Command 2
#define SkipCommand 3
#define SkipLine 4
#define SkipString 5
#define CopyLine 6
#define CopyString 7
#define Include 8
#define IncludeID 9
#define EndImport 10
#define DefName 11
#define DefineArg 12
#define DefineText 13
#define SkipCPPBlock 14
#define Ifdef 15
#define Ifndef 16
#define SkipCComment 17
#define ArgCopyCComment 18
#define CopyCComment 19
#define SkipVerbatim 20
#define SkipCPPComment 21
#define RemoveCComment 22
#define RemoveCPPComment 23
#define Guard 24
#define DefinedExpr1 25
#define DefinedExpr2 26
#define SkipDoubleQuote 27
#define SkipSingleQuote 28
#define UndefName 29
#define IgnoreLine 30
#define FindDefineArgs 31
#define ReadString 32
#define CondLineC 33
#define CondLineCpp 34
#define SkipCond 35

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int preYYlex_destroy (void );

int preYYget_debug (void );

void preYYset_debug (int debug_flag  );

YY_EXTRA_TYPE preYYget_extra (void );

void preYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *preYYget_in (void );

void preYYset_in  (FILE * in_str  );

FILE *preYYget_out (void );

void preYYset_out  (FILE * out_str  );

yy_size_t preYYget_leng (void );

char *preYYget_text (void );

int preYYget_lineno (void );

void preYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int preYYwrap (void );
#else
extern int preYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( preYYtext, preYYleng, 1, preYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( preYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( preYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, preYYin))==0 && ferror(preYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(preYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int preYYlex (void);

#define YY_DECL int preYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after preYYtext and preYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( preYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(preYYtext[preYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)preYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in preYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! preYYin )
			preYYin = stdin;

		if ( ! preYYout )
			preYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			preYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				preYY_create_buffer(preYYin,YY_BUF_SIZE );
		}

		preYY_load_buffer_state( );
		}

	{
#line 1769 "pre.l"


#line 4539 "/home/agustin/git/serverapp/doxygen/generated_src/pre.cpp"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of preYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1316 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1315 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 1771 "pre.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 1772 "pre.l"

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 1773 "pre.l"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 1774 "pre.l"
{ // Trigraph
  					  unput(resolveTrigraph(preYYtext[2]));
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 1777 "pre.l"
{ BEGIN(Command); g_yyColNr+=preYYleng; g_yyMLines=0;}
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1778 "pre.l"
{
 					  outputArray(preYYtext,(int)preYYleng);
  					  BEGIN(CopyLine); 
					}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 1782 "pre.l"
{ // constructors?
					  int i;
					  for (i=(int)preYYleng-1;i>=0;i--)
					  {
					    unput(preYYtext[i]);
					  }
					  BEGIN(CopyLine);
                                        }
	YY_BREAK
case 8:
/* rule 8 can match eol */
#line 1791 "pre.l"
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 1791 "pre.l"
{ // function like macro
  					  static bool skipFuncMacros = Config_getBool(SKIP_FUNCTION_MACROS);
					  QCString name(preYYtext);
					  name=name.left(name.find('(')).stripWhiteSpace();

					  Define *def=0;
					  if (skipFuncMacros && 
					      name!="Q_PROPERTY" &&
					      !(
					         (g_includeStack.isEmpty() || g_curlyCount>0) &&
					         g_macroExpansion &&
					         (def=DefineManager::instance().isDefined(name)) &&
						 /*macroIsAccessible(def) &&*/
					         (!g_expandOnlyPredef || def->isPredefined)
					       )
					     )
					  {
					    outputChar('\n');
					    g_yyLineNr++;
					  }
					  else // don't skip
					  {
					    int i;
					    for (i=(int)preYYleng-1;i>=0;i--)
					    {
					      unput(preYYtext[i]);
					    }
					    BEGIN(CopyLine);
					  }
  					}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 1821 "pre.l"
{
                                          QCString text=preYYtext;
  					  g_yyLineNr+=text.contains('\n');
					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 1826 "pre.l"
{ // count brackets inside the main file
  					  if (g_includeStack.isEmpty()) 
					  {
					    g_curlyCount++;
					  }
					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1833 "pre.l"
{ // count brackets inside the main file
  					  if (g_includeStack.isEmpty() && g_curlyCount>0) 
					  {
					    g_curlyCount--;
					  }
					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1840 "pre.l"
{ 
  					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1843 "pre.l"
{ 
  					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1846 "pre.l"
{ 
  					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1849 "pre.l"
{
					  outputChar(*preYYtext);
					  BEGIN( CopyString );
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1853 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1856 "pre.l"
{
					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1859 "pre.l"
{
					  outputChar(*preYYtext);
					  BEGIN( CopyLine );
					}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 1863 "pre.l"
{
  					  g_expectGuard = FALSE;
  					  Define *def=0;
					  //def=g_globalDefineDict->find(preYYtext);
					  //def=DefineManager::instance().isDefined(preYYtext);
					  //printf("Search for define %s found=%d g_includeStack.isEmpty()=%d "
					  //       "g_curlyCount=%d g_macroExpansion=%d g_expandOnlyPredef=%d "
					  //	 "isPreDefined=%d\n",preYYtext,def ? 1 : 0,
					  //	 g_includeStack.isEmpty(),g_curlyCount,g_macroExpansion,g_expandOnlyPredef,
					  //	 def ? def->isPredefined : -1
					  //	);
					  if ((g_includeStack.isEmpty() || g_curlyCount>0) &&
					      g_macroExpansion &&
					      (def=DefineManager::instance().isDefined(preYYtext)) &&
				              /*(def->isPredefined || macroIsAccessible(def)) && */
					      (!g_expandOnlyPredef || def->isPredefined)
					     )
					  {
					    //printf("Found it! #args=%d\n",def->nargs);
					    g_roundCount=0;
					    g_defArgsStr=preYYtext;
					    if (def->nargs==-1) // no function macro
					    {
					      QCString result = def->isPredefined ? def->definition : expandMacro(g_defArgsStr);
					      outputArray(result,result.length());
					    }
					    else // zero or more arguments
					    {
					      g_findDefArgContext = CopyLine;
					      BEGIN(FindDefineArgs);
					    }
					  }
					  else
					  {
					    outputArray(preYYtext,(int)preYYleng);
					  }
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1900 "pre.l"
{
                                          Define *def=0;
  					  if ((g_includeStack.isEmpty() || g_curlyCount>0) && 
					      g_macroExpansion &&
					      (def=DefineManager::instance().isDefined(preYYtext)) &&
					      def->nargs==-1 &&
				              /*(def->isPredefined || macroIsAccessible(def)) &&*/
					      (!g_expandOnlyPredef || def->isPredefined)
					     )
					  {
					    QCString result=def->isPredefined ? def->definition : expandMacro(preYYtext); 
					    outputArray(result,result.length());
					  }
					  else
					  {
					    outputArray(preYYtext,(int)preYYleng);
					  }
  					}
	YY_BREAK
case 22:
/* rule 22 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1918 "pre.l"
{ // strip line continuation characters
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1920 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 1923 "pre.l"
{
  					  outputChar('\n');
					  BEGIN(Start);
					  g_yyLineNr++;
					  g_yyColNr=1;
  					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1929 "pre.l"
{
  					  g_defArgsStr+='(';
  					  g_roundCount++;
  					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1933 "pre.l"
{
  					  g_defArgsStr+=')';
					  g_roundCount--;
					  if (g_roundCount==0)
					  {
					    QCString result=expandMacro(g_defArgsStr);
					    //printf("g_defArgsStr=`%s'->`%s'\n",g_defArgsStr.data(),result.data());
					    if (g_findDefArgContext==CopyLine)
					    {
					      outputArray(result,result.length());
					      BEGIN(g_findDefArgContext);
					    }
					    else // g_findDefArgContext==IncludeID
					    {
					      readIncludeFile(result);
					      g_nospaces=FALSE;
					      BEGIN(Start);
					    }
					  }
  					}
	YY_BREAK
/*
<FindDefineArgs>")"{B}*"("		{
  					  g_defArgsStr+=preYYtext;
  					}
  */
case 27:
YY_RULE_SETUP
#line 1958 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 1961 "pre.l"
{
                                          g_defArgsStr+=preYYtext;
                                          BEGIN(ArgCopyCComment);
                                        }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 1965 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					  BEGIN(ReadString);
  					}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 1969 "pre.l"
{
                                          g_defArgsStr+=' ';
  					  g_yyLineNr++;
					  outputChar('\n');
  					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1974 "pre.l"
{
  					  g_defArgsStr+="@@";
  					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1977 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1980 "pre.l"
{
					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1983 "pre.l"
{
					  g_defArgsStr+=preYYtext;
  					  BEGIN(FindDefineArgs);
  					}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 1987 "pre.l"
{ 
                                          g_defArgsStr+=' ';
  					  g_yyLineNr++;
					  outputChar('\n');
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1992 "pre.l"
{ 
                                          g_defArgsStr+=preYYtext;
                                        }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1995 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
					  BEGIN(FindDefineArgs);
  					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1999 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 2002 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 2005 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 2008 "pre.l"
{
  					  g_isImported = preYYtext[1]=='m';
  					  if (g_macroExpansion) 
					    BEGIN(IncludeID);
  					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 2013 "pre.l"
{ 
  					  g_isImported = preYYtext[1]=='m';
					  char c[2];
					  c[0]=preYYtext[preYYleng-1];c[1]='\0';
					  g_incName=c;
  					  BEGIN(Include); 
					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 2020 "pre.l"
{ 
  			                  //printf("!!!DefName\n"); 
					  g_yyColNr+=preYYleng;
  					  BEGIN(DefName); 
					}
	YY_BREAK
case 44:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2025 "pre.l"
{
  					  incrLevel();
					  g_guardExpr.resize(0);
  					  BEGIN(DefinedExpr2);
  					}
	YY_BREAK
case 45:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2030 "pre.l"
{
  					  //printf("Pre.l: ifdef\n");
  					  incrLevel();
					  g_guardExpr.resize(0);
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 46:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2036 "pre.l"
{
  					  incrLevel();
					  g_guardExpr="! ";
  					  BEGIN(DefinedExpr2);
					}
	YY_BREAK
case 47:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2041 "pre.l"
{
  					  incrLevel();
					  g_guardExpr="! ";
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 48:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2046 "pre.l"
{
  					  incrLevel();
					  g_guardExpr.resize(0);
					  BEGIN(Guard);
					}
	YY_BREAK
case 49:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2051 "pre.l"
{
  					  if (!otherCaseDone())
					  {
					    g_guardExpr.resize(0);
					    BEGIN(Guard);  
					  }
					  else
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 50:
/* rule 50 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
YY_LINENO_REWIND_TO(yy_bp + 4);
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2063 "pre.l"
{
					  //printf("else g_levelGuard[%d]=%d\n",g_level-1,g_levelGuard[g_level-1]);
  					  if (otherCaseDone())
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
					  else
					  {
					    setCaseDone(TRUE);
					    //g_levelGuard[g_level-1]=TRUE;
					  } 
  					}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 2076 "pre.l"
{
  					  BEGIN(UndefName);
  					}
	YY_BREAK
case 52:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2079 "pre.l"
{
  					  if (!otherCaseDone())
					  {
					    g_guardExpr.resize(0);
  					    BEGIN(Guard);
					  }
  					}
	YY_BREAK
case 53:
/* rule 53 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
YY_LINENO_REWIND_TO(yy_bp + 5);
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2086 "pre.l"
{
  					  //printf("Pre.l: #endif\n");
  					  decrLevel();
  					}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 2090 "pre.l"
{
  					  outputChar('\n');
  					  BEGIN(Start);
					  g_yyLineNr++;
  					}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 2095 "pre.l"
{
                                          g_expectGuard = FALSE;
                                        }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 2098 "pre.l"
{ // unknown directive
					  BEGIN(IgnoreLine);
					}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 2101 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;
					}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 2105 "pre.l"

	YY_BREAK
case 59:
YY_RULE_SETUP
#line 2106 "pre.l"
{g_yyColNr+=preYYleng;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 2107 "pre.l"
{
  					  Define *def;
  					  if ((def=DefineManager::instance().isDefined(preYYtext)) 
					      /*&& !def->isPredefined*/
					      && !def->nonRecursive
					     )
					  {
					    //printf("undefining %s\n",preYYtext);
					    def->undef=TRUE;
					  }
					  BEGIN(Start);
  					}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 2119 "pre.l"
{
  					  outputChar('\n');
  					  g_guardExpr+=' ';
					  g_yyLineNr++;
  					}
	YY_BREAK
case 62:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2124 "pre.l"
{
    					  BEGIN(DefinedExpr2);
    					}
	YY_BREAK
case 63:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2127 "pre.l"
{
    					  BEGIN(DefinedExpr1);
    					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 2130 "pre.l"
{ g_guardExpr+=preYYtext; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 2131 "pre.l"
{ g_guardExpr+=*preYYtext; }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 2132 "pre.l"
{
  					  unput(*preYYtext);
  					  //printf("Guard: `%s'\n",
					  //    g_guardExpr.data());
					  bool guard=computeExpression(g_guardExpr);
					  setCaseDone(guard);
					  //printf("if g_levelGuard[%d]=%d\n",g_level-1,g_levelGuard[g_level-1]);
					  if (guard)
					  {
					    BEGIN(Start);
					  } 
					  else
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 2149 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 2150 "pre.l"
{
  					  if (DefineManager::instance().isDefined(preYYtext) || g_guardName==preYYtext)
					    g_guardExpr+=" 1L ";
					  else
					    g_guardExpr+=" 0L ";
					  g_lastGuardName=preYYtext;
					  BEGIN(Guard);
  					}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 2158 "pre.l"
{
  					  if (DefineManager::instance().isDefined(preYYtext) || g_guardName==preYYtext)
					    g_guardExpr+=" 1L ";
					  else
					    g_guardExpr+=" 0L ";
					  g_lastGuardName=preYYtext;
  					}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 2165 "pre.l"
{ // should not happen, handle anyway
                                          g_yyLineNr++;
  					  g_ifcount=0;
 					  BEGIN(SkipCPPBlock); 
					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 2170 "pre.l"
{
  					  BEGIN(Guard);
  					}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 2173 "pre.l"

	YY_BREAK
case 73:
YY_RULE_SETUP
#line 2174 "pre.l"
{ BEGIN(SkipCommand); }
	YY_BREAK
case 74:
/* rule 74 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2175 "pre.l"
{ BEGIN(SkipLine); }
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 2176 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 2177 "pre.l"

	YY_BREAK
case 77:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2178 "pre.l"
{ 
  					  incrLevel();
                                          g_ifcount++; 
  					  //printf("#if... depth=%d\n",g_ifcount);
					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 2183 "pre.l"
{
					  //printf("Else! g_ifcount=%d otherCaseDone=%d\n",g_ifcount,otherCaseDone());
  					  if (g_ifcount==0 && !otherCaseDone())
					  {
					    setCaseDone(TRUE);
  					    //outputChar('\n');
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 79:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2192 "pre.l"
{
  					  if (g_ifcount==0) 
					  {
  					    if (!otherCaseDone())
					    {
					      g_guardExpr.resize(0);
					      g_lastGuardName.resize(0);
  					      BEGIN(Guard);
					    }
					    else
					    {
					      BEGIN(SkipCPPBlock);
					    }
					  }
					}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 2207 "pre.l"
{ 
					  g_expectGuard = FALSE;
  					  decrLevel();
  				          if (--g_ifcount<0)
  					  {
  					    //outputChar('\n');
					    BEGIN(Start);
					  }
					}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 2216 "pre.l"
{ 
  					  outputChar('\n');
  					  g_yyLineNr++; 
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 2221 "pre.l"
{ // unknown directive 
  					  BEGIN(SkipLine); 
					}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 2224 "pre.l"

	YY_BREAK
case 84:
YY_RULE_SETUP
#line 2225 "pre.l"

	YY_BREAK
case 85:
YY_RULE_SETUP
#line 2226 "pre.l"
{ }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 2227 "pre.l"
{
					  BEGIN(SkipString);
					}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 2230 "pre.l"

	YY_BREAK
case 88:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2231 "pre.l"
{ 
                                        }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 2233 "pre.l"
{
  					  g_lastCPPContext=YY_START;
  					  BEGIN(RemoveCPPComment);
					}
	YY_BREAK
case 90:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2237 "pre.l"
{ 
                                        }
	YY_BREAK
case 91:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2239 "pre.l"
{
					  g_lastCContext=YY_START;
  					  BEGIN(RemoveCComment);
  					}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 2243 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;  
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 2248 "pre.l"
{ }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 2249 "pre.l"
{ }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 2250 "pre.l"
{
  					  BEGIN(SkipLine);
  					}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 2253 "pre.l"
{ }
	YY_BREAK
case 97:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2254 "pre.l"
{
  					  g_nospaces=TRUE;
				          g_roundCount=0;
					  g_defArgsStr=preYYtext;
					  g_findDefArgContext = IncludeID;
					  BEGIN(FindDefineArgs);
					}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 2261 "pre.l"
{
  					  g_nospaces=TRUE;
                                          readIncludeFile(expandMacro(preYYtext));
					  BEGIN(Start);
  					}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 2266 "pre.l"
{ 
					  g_incName+=preYYtext;
					  readIncludeFile(g_incName);
					  if (g_isImported)
					  {
					    BEGIN(EndImport);
					  }
					  else
					  {
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 100:
/* rule 100 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2278 "pre.l"
{
  					  BEGIN(Start);
  					}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 2281 "pre.l"
{ 
					  outputChar('\n');
					  g_yyLineNr++;
					}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 2285 "pre.l"
{
  					}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 2287 "pre.l"
{ // define with argument
  					  //printf("Define() `%s'\n",preYYtext);
					  delete g_argDict;
					  g_argDict = new QDict<int>(31);
					  g_argDict->setAutoDelete(TRUE);
					  g_defArgs = 0; 
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defName = preYYtext;
					  g_defVarArgs = FALSE;
					  g_defExtraSpacing.resize(0);
					  BEGIN(DefineArg);
  					}
	YY_BREAK
case 104:
/* rule 104 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2301 "pre.l"
{ // special case: define with 1 -> can be "guard"
  					  //printf("Define `%s'\n",preYYtext);
					  delete g_argDict; g_argDict=0;
					  g_defArgs = -1;
                                          g_defArgsStr.resize(0);
					  g_defName = preYYtext;
					  g_defName = g_defName.left(g_defName.length()-1).stripWhiteSpace();
					  g_defVarArgs = FALSE;
					  //printf("Guard check: %s!=%s || %d\n",
					  //    g_defName.data(),g_lastGuardName.data(),g_expectGuard);
					  if (g_curlyCount>0 || g_defName!=g_lastGuardName || !g_expectGuard)
					  { // define may appear in the output
					    QCString tmp=(QCString)"#define "+g_defName;
					    outputArray(tmp.data(),tmp.length());
					    g_quoteArg=FALSE;
					    g_insideComment=FALSE;
					    g_lastGuardName.resize(0);
				            g_defText="1"; 
					    g_defLitText="1"; 
					    BEGIN(DefineText); 
					  }
					  else // define is a guard => hide
					  {
					    //printf("Found a guard %s\n",preYYtext);
					    g_defText.resize(0);
					    g_defLitText.resize(0);
					    BEGIN(Start);
					  }
					  g_expectGuard=FALSE;
  					}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 2331 "pre.l"
{ // empty define
					  delete g_argDict; g_argDict=0;
					  g_defArgs = -1;
					  g_defName = preYYtext;
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defVarArgs = FALSE;
					  //printf("Guard check: %s!=%s || %d\n",
					  //    g_defName.data(),g_lastGuardName.data(),g_expectGuard);
					  if (g_curlyCount>0 || g_defName!=g_lastGuardName || !g_expectGuard)
					  { // define may appear in the output
					    QCString tmp=(QCString)"#define "+g_defName;
					    outputArray(tmp.data(),tmp.length());
					    g_quoteArg=FALSE;
					    g_insideComment=FALSE;
					    if (g_insideCS) g_defText="1"; // for C#, use "1" as define text
					    BEGIN(DefineText);
					  }
					  else // define is a guard => hide
					  {
					    //printf("Found a guard %s\n",preYYtext);
					    g_guardName = preYYtext;
					    g_lastGuardName.resize(0);
					    BEGIN(Start);
					  }
					  g_expectGuard=FALSE;
  					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 2359 "pre.l"
{ // define with content
  					  //printf("Define `%s'\n",preYYtext);
					  delete g_argDict; g_argDict=0;
					  g_defArgs = -1;
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defName = preYYtext;
					  g_defVarArgs = FALSE;
					  QCString tmp=(QCString)"#define "+g_defName+g_defArgsStr;
					  outputArray(tmp.data(),tmp.length());
					  g_quoteArg=FALSE;
					  g_insideComment=FALSE;
					  BEGIN(DefineText); 
  					}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 2374 "pre.l"
{
  					  g_defExtraSpacing+="\n";
					  g_yyLineNr++;
                                        }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 2378 "pre.l"
{ g_defArgsStr+=preYYtext; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 2379 "pre.l"
{ g_defArgsStr+=preYYtext; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 2380 "pre.l"
{
                                          g_defArgsStr+=preYYtext; 
					  QCString tmp=(QCString)"#define "+g_defName+g_defArgsStr+g_defExtraSpacing;
					  outputArray(tmp.data(),tmp.length());
					  g_quoteArg=FALSE;
					  g_insideComment=FALSE;
  					  BEGIN(DefineText);
  					}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 2388 "pre.l"
{ // Variadic macro
					  g_defVarArgs = TRUE;
					  g_defArgsStr+=preYYtext;
					  g_argDict->insert("__VA_ARGS__",new int(g_defArgs));
					  g_defArgs++;
  					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 2394 "pre.l"
{
  					  //printf("Define addArg(%s)\n",preYYtext);
  					  QCString argName=preYYtext;
  					  g_defVarArgs = preYYtext[preYYleng-1]=='.';
					  if (g_defVarArgs) // strip ellipsis
					  {
					    argName=argName.left(argName.length()-3);
					  }
					  argName = argName.stripWhiteSpace();
                                          g_defArgsStr+=preYYtext;
					  g_argDict->insert(argName,new int(g_defArgs)); 
					  g_defArgs++;
  					}
	YY_BREAK
/*
<DefineText>"/ **"|"/ *!"			{
  					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_insideComment=TRUE;
  					}
<DefineText>"* /"			{
  					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_insideComment=FALSE;
  					}
  */
case 113:
YY_RULE_SETUP
#line 2419 "pre.l"
{
					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_lastCContext=YY_START;
					  g_commentCount=1;
  					  BEGIN(CopyCComment);
  					}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 2426 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					  g_lastCPPContext=YY_START;
					  g_defLitText+=' ';
  					  BEGIN(SkipCPPComment);
  					}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 2432 "pre.l"
{
  					  if (preYYtext[0]=='/') outputChar('/');
  					  outputChar('*');outputChar('/');
					  if (--g_commentCount<=0)
					  {
					    if (g_lastCContext==Start) 
					      // small hack to make sure that ^... rule will
					      // match when going to Start... Example: "/*...*/ some stuff..."
					    {
					      YY_CURRENT_BUFFER->yy_at_bol=1;
					    }
  					    BEGIN(g_lastCContext);  
					  }
  					}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 2446 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 2449 "pre.l"
{
  					  outputChar('/');outputChar('*');
					  //g_commentCount++;
  					}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 2453 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 2456 "pre.l"
{
                                          static bool markdownSupport = Config_getBool(MARKDOWN_SUPPORT);
                                          if (!markdownSupport)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
  					    outputArray(preYYtext,(int)preYYleng);
                                            g_fenceSize=preYYleng;
                                            BEGIN(SkipVerbatim);
                                          }
                                        }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 2469 "pre.l"
{
                                          static bool markdownSupport = Config_getBool(MARKDOWN_SUPPORT);
                                          if (!markdownSupport)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
  					    outputArray(preYYtext,(int)preYYleng);
                                            g_fenceSize=preYYleng;
                                            BEGIN(SkipVerbatim);
                                          }
                                        }
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 2482 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					  g_yyLineNr+=QCString(preYYtext).contains('\n');
  					}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 2486 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					  g_yyLineNr+=QCString(preYYtext).contains('\n');
                                          g_fenceSize=0;
					  if (preYYtext[1]=='f')
					  {
					    g_blockName="f";
					  }
					  else
					  {
                                            QCString bn=&preYYtext[1];
                                            int i = bn.find('{'); // for \code{.c}
                                            if (i!=-1) bn=bn.left(i);
					    g_blockName=bn.stripWhiteSpace();
					  }
					  BEGIN(SkipVerbatim);
  					}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 2503 "pre.l"
{ // escaped @cond
  					  outputArray(preYYtext,(int)preYYleng);
                                        }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 2506 "pre.l"
{ // conditional section
                                          g_ccomment=TRUE;  
                                          g_condCtx=YY_START;
  					  BEGIN(CondLineCpp);
  					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 2511 "pre.l"
{ // conditional section
                                          g_ccomment=FALSE;  
                                          g_condCtx=YY_START;
  					  BEGIN(CondLineC);
  					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 2516 "pre.l"
{
  				          startCondSection(preYYtext);
                                          if (g_skip)
                                          {
                                            if (YY_START==CondLineC)
                                            {
                                              // end C comment
  					      outputArray("*/",2);
                                              g_ccomment=TRUE;
                                            }
                                            else
                                            {
                                              g_ccomment=FALSE;
                                            }
                                            BEGIN(SkipCond);
                                          }
                                          else
                                          {
  					    BEGIN(g_condCtx);
                                          }
  					}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 2537 "pre.l"
{ // non-guard character
  					  unput(*preYYtext);
  					  startCondSection(" ");
                                          if (g_skip)
                                          {
                                            if (YY_START==CondLineC)
                                            {
                                              // end C comment
  					      outputArray("*/",2);
                                              g_ccomment=TRUE;
                                            }
                                            else
                                            {
                                              g_ccomment=FALSE;
                                            }
                                            BEGIN(SkipCond);
                                          }
                                          else
                                          {
					    BEGIN(g_condCtx);
                                          }
  					}
	YY_BREAK
case 128:
/* rule 128 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2559 "pre.l"
{ // no guard
                                          if (YY_START==SkipCComment)
                                          {
                                            g_ccomment=TRUE;
                                            // end C comment
  					    outputArray("*/",2);
                                          }
                                          else
                                          {
                                            g_ccomment=FALSE;
                                          }
                                          g_condCtx=YY_START;
                                          startCondSection(" ");
                                          BEGIN(SkipCond);
  					}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 2574 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 2575 "pre.l"
{ }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 2576 "pre.l"
{ }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 2577 "pre.l"
{ g_ccomment=FALSE; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 2578 "pre.l"
{ g_ccomment=TRUE; }
	YY_BREAK
case 134:
/* rule 134 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
YY_LINENO_REWIND_TO(yy_bp + 9);
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2579 "pre.l"
{
                                          if (!g_skip)
                                          {
  					    outputArray(preYYtext,(int)preYYleng);
                                          }
                                        }
	YY_BREAK
case 135:
/* rule 135 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2585 "pre.l"
{ 
                                          bool oldSkip = g_skip;
                                          endCondSection(); 
                                          if (oldSkip && !g_skip)
                                          {
                                            if (g_ccomment)
                                            {
                                              outputArray("/** ",4);
                                            }
                                            BEGIN(g_condCtx);
                                          }
                                        }
	YY_BREAK
case 136:
/* rule 136 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2597 "pre.l"
{
                                          bool oldSkip = g_skip;
  					  endCondSection();
                                          if (oldSkip && !g_skip) 
                                          {
                                            BEGIN(g_condCtx);
                                          }
  					}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 2605 "pre.l"
{ /* end of verbatim block */
  					  outputArray(preYYtext,(int)preYYleng);
					  if (preYYtext[1]=='f' && g_blockName=="f")
					  {
					    BEGIN(SkipCComment);
					  }
					  else if (&preYYtext[4]==g_blockName)
					  {
					    BEGIN(SkipCComment);
					  }
  					}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 2616 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
                                          if (g_fenceSize==preYYleng)
                                          {
                                            BEGIN(SkipCComment);
                                          }
                                        }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 2623 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
                                          if (g_fenceSize==preYYleng)
                                          {
                                            BEGIN(SkipCComment);
                                          }
                                        }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 2630 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 2633 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 2636 "pre.l"
{ 
  					  g_yyLineNr++;
  					  outputChar('\n');
  					}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 2640 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 2643 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=escapeAt(preYYtext);
  					}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 2647 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=preYYtext;
  					  BEGIN(g_lastCContext);
  					}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 2652 "pre.l"
{ 
  					  g_yyLineNr++;
  					  outputChar('\n');
					  g_defLitText+=preYYtext;
					  g_defText+=' ';
  					}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 2658 "pre.l"
{ // see bug 594021 for a usecase for this rule
                                          if (g_lastCContext==SkipCPPBlock)
					  {
					    BEGIN(SkipCommand);
					  }
					  else
					  {
					    REJECT;
					  }
					}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 2668 "pre.l"
{ BEGIN(g_lastCContext); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 2669 "pre.l"

	YY_BREAK
case 150:
YY_RULE_SETUP
#line 2670 "pre.l"

	YY_BREAK
case 151:
YY_RULE_SETUP
#line 2671 "pre.l"

	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 2672 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 2673 "pre.l"

	YY_BREAK
case 154:
YY_RULE_SETUP
#line 2674 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 2677 "pre.l"
{
  					  unput(*preYYtext);
  					  BEGIN(g_lastCPPContext);
  					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 2681 "pre.l"
{
  					  outputChar('/');outputChar('*');
  					}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 2684 "pre.l"
{
  					  outputChar('/');outputChar('/');
  					}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 2687 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 2690 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 2693 "pre.l"

	YY_BREAK
case 161:
YY_RULE_SETUP
#line 2694 "pre.l"

	YY_BREAK
case 162:
YY_RULE_SETUP
#line 2695 "pre.l"

	YY_BREAK
case 163:
YY_RULE_SETUP
#line 2696 "pre.l"

	YY_BREAK
case 164:
YY_RULE_SETUP
#line 2697 "pre.l"
{
  					  g_quoteArg=TRUE;
					  g_defLitText+=preYYtext;
  					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 2701 "pre.l"
{
					  g_defLitText+=preYYtext;
  					  if (g_quoteArg)
					  {
					    g_defText+="\"";
					  }
					  if (g_defArgs>0)
					  {
					    int *n;
					    if ((n=(*g_argDict)[preYYtext]))
					    {
					      //if (!g_quoteArg) g_defText+=' ';
					      g_defText+='@';
					      QCString numStr;
					      numStr.sprintf("%d",*n);
					      g_defText+=numStr;
					      //if (!g_quoteArg) g_defText+=' ';
					    }
					    else
					    {
					      g_defText+=preYYtext;
					    }
					  }
					  else
					  {
					    g_defText+=preYYtext;
					  }
					  if (g_quoteArg)
					  {
					    g_defText+="\"";
					  }
					  g_quoteArg=FALSE;
  					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 2734 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=preYYtext;
  					}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 2738 "pre.l"
{ 
					  g_defLitText+=preYYtext;
					  outputChar('\n');
					  g_defText += ' ';
					  g_yyLineNr++;
					  g_yyMLines++;
					}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 2745 "pre.l"
{
					  QCString comment=extractTrailingComment(g_defLitText);
					  g_defLitText+=preYYtext;
					  if (!comment.isEmpty())
					  {
					    outputArray(comment,comment.length());
					    g_defLitText=g_defLitText.left(g_defLitText.length()-comment.length()-1);
					  }
  					  outputChar('\n');
  					  Define *def=0;
					  //printf("Define name=`%s' text=`%s' litTexti=`%s'\n",g_defName.data(),g_defText.data(),g_defLitText.data());
					  if (g_includeStack.isEmpty() || g_curlyCount>0) 
					  {
					    addDefine();
					  }
					  def=DefineManager::instance().isDefined(g_defName);
					  if (def==0) // new define
					  {
					    //printf("new define '%s'!\n",g_defName.data());
					    Define *nd = newDefine();
					    DefineManager::instance().addDefine(g_yyFileName,nd);

					    // also add it to the local file list if it is a source file
					    //if (g_isSource && g_includeStack.isEmpty())
					    //{
					    //  g_fileDefineDict->insert(g_defName,nd);
					    //}
					  }
					  else if (def /*&& macroIsAccessible(def)*/)
					       // name already exists
					  {
					    //printf("existing define!\n");
					    //printf("define found\n");
					    if (def->undef) // undefined name
					    {
					      def->undef = FALSE;
					      def->name = g_defName;
					      def->definition = g_defText.stripWhiteSpace();
					      def->nargs = g_defArgs;
					      def->fileName = g_yyFileName.copy(); 
					      def->lineNr = g_yyLineNr-g_yyMLines;
					      def->columnNr = g_yyColNr;
					    }
					    else
					    {
					      //printf("error: define %s is defined more than once!\n",g_defName.data());
					    }
					  }
					  delete g_argDict; g_argDict=0;
					  g_yyLineNr++;
					  g_yyColNr=1;
					  g_lastGuardName.resize(0);
					  BEGIN(Start);
  					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 2799 "pre.l"
{ g_defText += ' '; g_defLitText+=preYYtext; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 2800 "pre.l"
{ g_defText += "##"; g_defLitText+=preYYtext; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 2801 "pre.l"
{ g_defText += "@@"; g_defLitText+=preYYtext; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 2802 "pre.l"
{ 
                                          g_defText += *preYYtext; 
  					  g_defLitText+=preYYtext; 
					  if (!g_insideComment)
					  {
					    BEGIN(SkipDoubleQuote);
					  }
  					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 2810 "pre.l"
{ g_defText += *preYYtext;
  					  g_defLitText+=preYYtext; 
					  if (!g_insideComment)
					  {
  					    BEGIN(SkipSingleQuote);
					  }
					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 2817 "pre.l"
{ g_defText += preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 2818 "pre.l"
{ g_defText += preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 2819 "pre.l"
{
  					  g_defText += *preYYtext; g_defLitText+=preYYtext; 
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 2823 "pre.l"
{
  					  g_defText += preYYtext; g_defLitText+=preYYtext;
					}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 2826 "pre.l"
{
  					  g_defText += *preYYtext; g_defLitText+=preYYtext;
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 2830 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 2831 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 2832 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Command):
case YY_STATE_EOF(SkipCommand):
case YY_STATE_EOF(SkipLine):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(CopyLine):
case YY_STATE_EOF(CopyString):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(IncludeID):
case YY_STATE_EOF(EndImport):
case YY_STATE_EOF(DefName):
case YY_STATE_EOF(DefineArg):
case YY_STATE_EOF(DefineText):
case YY_STATE_EOF(SkipCPPBlock):
case YY_STATE_EOF(Ifdef):
case YY_STATE_EOF(Ifndef):
case YY_STATE_EOF(SkipCComment):
case YY_STATE_EOF(ArgCopyCComment):
case YY_STATE_EOF(CopyCComment):
case YY_STATE_EOF(SkipVerbatim):
case YY_STATE_EOF(SkipCPPComment):
case YY_STATE_EOF(RemoveCComment):
case YY_STATE_EOF(RemoveCPPComment):
case YY_STATE_EOF(Guard):
case YY_STATE_EOF(DefinedExpr1):
case YY_STATE_EOF(DefinedExpr2):
case YY_STATE_EOF(SkipDoubleQuote):
case YY_STATE_EOF(SkipSingleQuote):
case YY_STATE_EOF(UndefName):
case YY_STATE_EOF(IgnoreLine):
case YY_STATE_EOF(FindDefineArgs):
case YY_STATE_EOF(ReadString):
case YY_STATE_EOF(CondLineC):
case YY_STATE_EOF(CondLineCpp):
case YY_STATE_EOF(SkipCond):
#line 2833 "pre.l"
{
                                          DBG_CTX((stderr,"End of include file\n"));
					  //printf("Include stack depth=%d\n",g_includeStack.count());
  					  if (g_includeStack.isEmpty())
					  {
					    DBG_CTX((stderr,"Terminating scanner!\n"));
					    yyterminate();
					  }
					  else
					  {
					    FileState *fs=g_includeStack.pop();
					    //fileDefineCache->merge(g_yyFileName,fs->fileName);
					    YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
					    preYY_switch_to_buffer(fs->bufState );
					    preYY_delete_buffer(oldBuf );
					    g_yyLineNr    = fs->lineNr;
                                            //preYYin = fs->oldYYin;
                                            g_inputBuf    = fs->oldFileBuf;
					    g_inputBufPos = fs->oldFileBufPos;
					    setFileName(fs->fileName);
					    DBG_CTX((stderr,"######## FileName %s\n",g_yyFileName.data()));
					    
                                            // Deal with file changes due to 
                                            // #include's within { .. } blocks
                                            QCString lineStr(15+g_yyFileName.length());
                                            lineStr.sprintf("# %d \"%s\" 2",g_yyLineNr,g_yyFileName.data());
                                            outputArray(lineStr.data(),lineStr.length());
					    
					    delete fs; fs=0;
					  }
  					}
	YY_BREAK
case 182:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
#line 2865 "pre.l"
case 183:
YY_RULE_SETUP
#line 2865 "pre.l"
{
                                          if (YY_START==SkipVerbatim || YY_START==SkipCond)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
					    outputArray(preYYtext,(int)preYYleng);
  					    g_lastCContext=YY_START;
					    g_commentCount=1;
					    if (preYYleng==3) g_lastGuardName.resize(0); // reset guard in case the #define is documented!
					    BEGIN(SkipCComment);
                                          }
  					}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 2879 "pre.l"
{
                                          if (YY_START==SkipVerbatim || YY_START==SkipCond)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
					    outputArray(preYYtext,(int)preYYleng);
  					    g_lastCPPContext=YY_START;
					    if (preYYleng==3) g_lastGuardName.resize(0); // reset guard in case the #define is documented!
					    BEGIN(SkipCPPComment);
                                          }
					}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 2892 "pre.l"
{ 
  					  outputChar('\n');
  					  g_yyLineNr++; 
					}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 2896 "pre.l"
{
  					  g_expectGuard = FALSE;
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 2901 "pre.l"
ECHO;
	YY_BREAK
#line 6667 "/home/agustin/git/serverapp/doxygen/generated_src/pre.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed preYYin at a new source and called
			 * preYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = preYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( preYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * preYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of preYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			preYYrestart(preYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) preYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 60);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1316 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 60;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1316 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1315);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up preYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					preYYrestart(preYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( preYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve preYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void preYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        preYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            preYY_create_buffer(preYYin,YY_BUF_SIZE );
	}

	preYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	preYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void preYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		preYYpop_buffer_state();
	 *		preYYpush_buffer_state(new_buffer);
     */
	preYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	preYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (preYYwrap()) processing, but the only time this flag
	 * is looked at is after preYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void preYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	preYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE preYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) preYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	preYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with preYY_create_buffer()
 * 
 */
    void preYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		preYYfree((void *) b->yy_ch_buf  );

	preYYfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a preYYrestart() or at EOF.
 */
    static void preYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	preYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then preYY_init_buffer was _probably_
     * called from preYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void preYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		preYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	preYYensure_buffer_stack();

	/* This block is copied from preYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from preYY_switch_to_buffer. */
	preYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void preYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	preYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		preYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void preYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE preYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	preYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to preYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       preYY_scan_bytes() instead.
 */
YY_BUFFER_STATE preYY_scan_string (yyconst char * yystr )
{
    
	return preYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to preYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE preYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) preYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = preYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in preYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		preYYtext[preYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = preYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		preYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int preYYget_lineno  (void)
{
        
    return preYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *preYYget_in  (void)
{
        return preYYin;
}

/** Get the output stream.
 * 
 */
FILE *preYYget_out  (void)
{
        return preYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t preYYget_leng  (void)
{
        return preYYleng;
}

/** Get the current token.
 * 
 */

char *preYYget_text  (void)
{
        return preYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void preYYset_lineno (int  line_number )
{
    
    preYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see preYY_switch_to_buffer
 */
void preYYset_in (FILE *  in_str )
{
        preYYin = in_str ;
}

void preYYset_out (FILE *  out_str )
{
        preYYout = out_str ;
}

int preYYget_debug  (void)
{
        return preYY_flex_debug;
}

void preYYset_debug (int  bdebug )
{
        preYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from preYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    preYYin = stdin;
    preYYout = stdout;
#else
    preYYin = (FILE *) 0;
    preYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * preYYlex_init()
     */
    return 0;
}

/* preYYlex_destroy is for both reentrant and non-reentrant scanners. */
int preYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		preYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		preYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	preYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    preYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * preYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *preYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *preYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void preYYfree (void * ptr )
{
	free( (char *) ptr );	/* see preYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2900 "pre.l"



/*@ ----------------------------------------------------------------------------
 */

static int getNextChar(const QCString &expr,QCString *rest,uint &pos)
{
  //printf("getNextChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos++);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    *rest=rest->right(rest->length()-1);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput();
    //printf("%d=yyinput() %d\n",cc,EOF);
    return cc;
  }
}
 
static int getCurrentChar(const QCString &expr,QCString *rest,uint pos)
{
  //printf("getCurrentChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput();
    returnCharToStream(cc);
    //unput((char)cc);
    //printf("%c=yyinput()\n",cc);
    return cc;
  }
}

static void unputChar(const QCString &expr,QCString *rest,uint &pos,char c)
{
  //printf("unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
  if (pos<expr.length())
  {
    pos++;
  }
  else if (rest)
  {
    //printf("Prepending to rest!\n");
    char cs[2];cs[0]=c;cs[1]='\0';
    rest->prepend(cs);
  }
  else
  {
    //unput(c);
    returnCharToStream(c);
  }
  //printf("result: unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
}

void addSearchDir(const char *dir)
{
  QFileInfo fi(dir);
  if (fi.isDir()) g_pathList->append(fi.absFilePath().utf8());
} 

void initPreprocessor()
{
  g_pathList = new QStrList;
  addSearchDir(".");
  g_expandedDict = new DefineDict(17);
}

void cleanUpPreprocessor()
{
  delete g_expandedDict; g_expandedDict=0;
  delete g_pathList; g_pathList=0;
  DefineManager::deleteInstance();
}


void preprocessFile(const char *fileName,BufStr &input,BufStr &output)
{
  printlex(preYY_flex_debug, TRUE, __FILE__, fileName);
  uint orgOffset=output.curPos();
  //printf("##########################\n%s\n####################\n",
  //    input.data());

  g_macroExpansion = Config_getBool(MACRO_EXPANSION);
  g_expandOnlyPredef = Config_getBool(EXPAND_ONLY_PREDEF);
  g_skip=FALSE;
  g_curlyCount=0;
  g_nospaces=FALSE;
  g_inputBuf=&input;
  g_inputBufPos=0;
  g_outputBuf=&output;
  g_includeStack.setAutoDelete(TRUE);
  g_includeStack.clear();
  g_expandedDict->setAutoDelete(FALSE);
  g_expandedDict->clear();
  g_condStack.setAutoDelete(TRUE);
  g_condStack.clear();
  //g_fileDefineDict->clear();

  setFileName(fileName);
  g_inputFileDef = g_yyFileDef;
  DefineManager::instance().startContext(g_yyFileName);
  
  static bool firstTime=TRUE;
  if (firstTime)
  {
    // add predefined macros
    char *defStr;
    QStrList &predefList = Config_getList(PREDEFINED);
    QStrListIterator sli(predefList);
    for (sli.toFirst();(defStr=sli.current());++sli)
    {
      QCString ds = defStr;
      int i_equals=ds.find('=');
      int i_obrace=ds.find('(');
      int i_cbrace=ds.find(')');
      bool nonRecursive = i_equals>0 && ds.at(i_equals-1)==':';

      if (i_obrace==0) continue; // no define name

      if (i_obrace<i_equals && i_cbrace<i_equals && 
	  i_obrace!=-1      && i_cbrace!=-1      && 
	  i_obrace<i_cbrace
	 ) // predefined function macro definition
      {
	//printf("predefined function macro '%s'\n",defStr);
	QRegExp reId("[a-z_A-Z\x80-\xFF][a-z_A-Z0-9\x80-\xFF]*"); // regexp matching an id
	QDict<int> argDict(17);
	argDict.setAutoDelete(TRUE);
	int i=i_obrace+1,p,l,count=0;
	// gather the formal arguments in a dictionary 
	while (i<i_cbrace && (p=reId.match(ds,i,&l)))
	{
          if (l>0) // see bug375037
          {
	    argDict.insert(ds.mid(p,l),new int(count++));
	    i=p+l;
          }
          else
          {
            i++;
          }
	}
	// strip definition part
	QCString tmp=ds.right(ds.length()-i_equals-1);
	QCString definition;
	i=0;
	// substitute all occurrences of formal arguments by their 
	// corresponding markers
	while ((p=reId.match(tmp,i,&l))!=-1)
	{
	  if (p>i) definition+=tmp.mid(i,p-i);
	  int *argIndex;
	  if ((argIndex=argDict[tmp.mid(p,l)])!=0)
	  {
	    QCString marker;
	    marker.sprintf(" @%d ",*argIndex);
	    definition+=marker;
	  }
	  else
	  {
	    definition+=tmp.mid(p,l);
	  }
	  i=p+l;
	}
	if (i<(int)tmp.length()) definition+=tmp.mid(i,tmp.length()-i);

	// add define definition to the dictionary of defines for this file
	QCString dname = ds.left(i_obrace);
	if (!dname.isEmpty())
	{
	  Define *def = new Define;
	  def->name         = dname;
	  def->definition   = definition; 
	  def->nargs        = count;
	  def->isPredefined = TRUE;
	  def->nonRecursive = nonRecursive;
	  def->fileDef      = g_yyFileDef;
	  def->fileName     = fileName;
	  DefineManager::instance().addDefine(g_yyFileName,def);
	}

	//printf("#define `%s' `%s' #nargs=%d\n",
	//  def->name.data(),def->definition.data(),def->nargs);
      }
      else if ((i_obrace==-1 || i_obrace>i_equals) &&
	  (i_cbrace==-1 || i_cbrace>i_equals) &&
	  !ds.isEmpty() && (int)ds.length()>i_equals
	  ) // predefined non-function macro definition
      {
	//printf("predefined normal macro '%s'\n",defStr);
	Define *def = new Define;
	if (i_equals==-1) // simple define without argument
	{
	  def->name = ds;
	  def->definition = "1"; // substitute occurrences by 1 (true)
	}
	else // simple define with argument
	{
	  int ine=i_equals - (nonRecursive ? 1 : 0);
	  def->name = ds.left(ine);
	  def->definition = ds.right(ds.length()-i_equals-1);
	}
	if (!def->name.isEmpty())
	{
	  def->nargs = -1;
	  def->isPredefined = TRUE;
	  def->nonRecursive = nonRecursive;
	  def->fileDef      = g_yyFileDef;
	  def->fileName     = fileName;
	  DefineManager::instance().addDefine(g_yyFileName,def);
	}
	else
	{
	  delete def;
	}

	//printf("#define `%s' `%s' #nargs=%d\n",
	//  def->name.data(),def->definition.data(),def->nargs);
      }
    }
    //firstTime=FALSE;
  }
 
  g_yyLineNr = 1;
  g_yyColNr  = 1;
  g_level    = 0;
  g_ifcount  = 0;

  BEGIN( Start );
  
  g_expectGuard = guessSection(fileName)==Entry::HEADER_SEC;
  g_guardName.resize(0);
  g_lastGuardName.resize(0);
  g_guardExpr.resize(0);
  
  preYYlex();
  g_lexInit=TRUE;

  while (!g_condStack.isEmpty())
  {
    CondCtx *ctx = g_condStack.pop();
    QCString sectionInfo = " ";
    if (ctx->sectionId!=" ") sectionInfo.sprintf(" with label %s ",ctx->sectionId.data()); 
    warn(fileName,ctx->lineNr,"Conditional section%sdoes not have "
	"a corresponding \\endcond command within this file.",sectionInfo.data());
    delete ctx;
  }
  // make sure we don't extend a \cond with missing \endcond over multiple files (see bug 624829)
  forceEndCondSection();

  // remove locally defined macros so they can be redefined in another source file
  //if (g_fileDefineDict->count()>0)
  //{
  //  QDictIterator<Define> di(*g_fileDefineDict);
  //  Define *d;
  //  for (di.toFirst();(d=di.current());++di)
  //  {
  //    g_globalDefineDict->remove(di.currentKey());
  //  }
  //  g_fileDefineDict->clear();
  //}

  if (Debug::isFlagSet(Debug::Preprocessor))
  {
    char *orgPos=output.data()+orgOffset;
    char *newPos=output.data()+output.curPos();
    Debug::print(Debug::Preprocessor,0,"Preprocessor output (size: %d bytes):\n",newPos-orgPos);
    int line=1;
    Debug::print(Debug::Preprocessor,0,"---------\n00001 ");
    while (orgPos<newPos) 
    {
      putchar(*orgPos);
      if (*orgPos=='\n') Debug::print(Debug::Preprocessor,0,"%05d ",++line);
      orgPos++;
    }
    Debug::print(Debug::Preprocessor,0,"\n---------\n");
    if (DefineManager::instance().defineContext().count()>0)
    {
      Debug::print(Debug::Preprocessor,0,"Macros accessible in this file:\n");
      Debug::print(Debug::Preprocessor,0,"---------\n");
      QDictIterator<Define> di(DefineManager::instance().defineContext());
      Define *def;
      for (di.toFirst();(def=di.current());++di)
      {
        Debug::print(Debug::Preprocessor,0,"%s ",qPrint(def->name));
      }
      Debug::print(Debug::Preprocessor,0,"\n---------\n");
    }
    else
    {
      Debug::print(Debug::Preprocessor,0,"No macros accessible in this file.\n");
    }
  }
  DefineManager::instance().endContext();
  printlex(preYY_flex_debug, FALSE, __FILE__, fileName);
}

void preFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION) 
  if (g_lexInit)
  {
    preYYlex_destroy();
  }
#endif
}

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
extern "C" { // some bogus code to keep the compiler happy
//  int  preYYwrap() { return 1 ; }
  void preYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


